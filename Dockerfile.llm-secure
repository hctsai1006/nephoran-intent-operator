# Security-Hardened LLM Processor Dockerfile
# SECURITY LEVEL: MAXIMUM | Attack Surface: MINIMAL
# Optimized for AI/ML workloads with security constraints
#
# Security Features:
# - Distroless base with no attack tools
# - Non-root execution (UID 65532)
# - Read-only filesystem compatible
# - Secrets mounted via volumes only
# - Network segmentation ready

# ============================================================================
# STAGE 1: DEPENDENCIES
# ============================================================================
FROM golang:1.24-alpine AS dependencies

RUN addgroup -g 65532 -S nonroot && \
    adduser -u 65532 -S nonroot -G nonroot

WORKDIR /deps
COPY --chown=nonroot:nonroot go.mod go.sum ./

USER nonroot:nonroot
RUN go mod download && \
    go mod verify && \
    # Security: Audit dependencies for known vulnerabilities
    go list -json -m all | grep -E '"(Path|Version)"' > /deps/deps.json

# ============================================================================
# STAGE 2: BUILD
# ============================================================================
FROM golang:1.24-alpine AS builder

ARG BUILD_DATE
ARG VCS_REF  
ARG VERSION=v2.0.0

# Security: Minimal build environment
RUN apk add --no-cache git ca-certificates tzdata && \
    apk upgrade --no-cache && \
    rm -rf /var/cache/apk/*

RUN addgroup -g 65532 -S nonroot && \
    adduser -u 65532 -S nonroot -G nonroot

WORKDIR /build

# Copy verified dependencies
COPY --from=dependencies /go/pkg /go/pkg

# Copy source with ownership
COPY --chown=nonroot:nonroot cmd/llm-processor/ cmd/llm-processor/
COPY --chown=nonroot:nonroot pkg/ pkg/
COPY --chown=nonroot:nonroot api/ api/
COPY --chown=nonroot:nonroot go.mod go.sum ./

USER nonroot:nonroot

# Security-hardened build with PIE and fortify
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -buildmode=pie \
    -trimpath \
    -mod=readonly \
    -ldflags="-w -s -linkmode=external -extldflags '-static -fno-PIC -D_FORTIFY_SOURCE=2' \
              -X main.version=${VERSION} \
              -X main.buildDate=${BUILD_DATE} \
              -X main.gitCommit=${VCS_REF} \
              -buildid=" \
    -tags="netgo osusergo static_build" \
    -o /build/llm-processor \
    ./cmd/llm-processor/main.go

# Verify binary properties
RUN file /build/llm-processor | grep -q "statically linked" && \
    file /build/llm-processor | grep -q "stripped"

# ============================================================================
# STAGE 3: SECURITY VALIDATION
# ============================================================================
FROM golang:1.24-alpine AS validator

COPY --from=builder /build/llm-processor /validate/

# Security checks
RUN apk add --no-cache file && \
    # Check for dynamic dependencies
    ldd /validate/llm-processor 2>&1 | grep -q "not a dynamic executable" && \
    # Check file permissions
    stat -c "%a" /validate/llm-processor | grep -q "555"

# ============================================================================
# STAGE 4: RUNTIME
# ============================================================================
FROM gcr.io/distroless/static:nonroot

# Import certificates and timezone
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy binary with restricted permissions
COPY --from=builder --chmod=555 /build/llm-processor /llm-processor

# Security annotations
LABEL security.scan="required" \
      security.user="65532:65532" \
      security.capabilities="drop:ALL" \
      security.read-only-root="true" \
      security.no-new-privileges="true" \
      security.seccomp="runtime/default" \
      security.apparmor="runtime/default" \
      network.isolation="required" \
      org.opencontainers.image.title="LLM Processor" \
      org.opencontainers.image.description="Security-hardened AI/ML processing service"

# Non-root user
USER 65532:65532

# Security-conscious environment
ENV PORT=8080 \
    LOG_LEVEL=info \
    METRICS_ENABLED=true \
    # Security: Limit resources
    GOGC=100 \
    GOMEMLIMIT=1GiB \
    GOMAXPROCS=4 \
    # Security: Disable debugging
    GODEBUG=gctrace=0 \
    # Security: API limits
    MAX_REQUEST_SIZE=10485760 \
    REQUEST_TIMEOUT=30s \
    RATE_LIMIT=100 \
    # Security: TLS enforcement
    TLS_MIN_VERSION=1.3 \
    REQUIRE_TLS=true

# Health check without shell access
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=3 \
    CMD ["/llm-processor", "--health-check"]

# Single exposed port
EXPOSE 8080/tcp

# Read-only root filesystem compatible
ENTRYPOINT ["/llm-processor"]

# Security: Default args enforce secure mode
CMD ["--secure-mode", "--port=8080", "--log-level=info"]