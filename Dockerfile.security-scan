# Security Scanning Dockerfile for CI/CD Pipeline
# Purpose: Comprehensive vulnerability scanning and compliance validation
# Usage: docker build -f Dockerfile.security-scan --build-arg IMAGE_TO_SCAN=<image> .
#
# This Dockerfile runs multiple security tools to validate container images:
# - Trivy: CVE scanning
# - Grype: Additional vulnerability detection  
# - Syft: SBOM generation
# - Hadolint: Dockerfile linting
# - Dockle: Container security best practices
# - Checkov: Infrastructure as code scanning

# ============================================================================
# STAGE 1: MULTI-SCANNER
# ============================================================================
FROM alpine:3.20 AS scanner

# Install scanning tools
RUN apk add --no-cache \
    curl \
    docker \
    python3 \
    py3-pip \
    git \
    jq \
    && rm -rf /var/cache/apk/*

# Install Trivy
RUN curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.0

# Install Grype
RUN curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

# Install Syft  
RUN curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

# Install Hadolint
RUN curl -sSfL https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64 \
    -o /usr/local/bin/hadolint && \
    chmod +x /usr/local/bin/hadolint

# Install Dockle
RUN VERSION=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
    grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/') && \
    curl -L -o /usr/local/bin/dockle \
    "https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.tar.gz" && \
    tar -xzf /usr/local/bin/dockle -C /usr/local/bin && \
    rm /usr/local/bin/dockle_*.tar.gz

# Install Checkov
RUN pip3 install --no-cache-dir checkov

# Create scan directory
WORKDIR /scan

# Copy scan scripts
COPY --chmod=755 <<'SCAN_SCRIPT' /scan/run-scan.sh
#!/bin/sh
set -e

IMAGE_TO_SCAN=${1:-$IMAGE_TO_SCAN}
SCAN_RESULTS="/scan/results"
mkdir -p $SCAN_RESULTS

echo "========================================="
echo "Security Scan Report for: $IMAGE_TO_SCAN"
echo "========================================="
echo ""

# 1. Trivy Scan
echo "[1/6] Running Trivy vulnerability scan..."
trivy image \
    --severity HIGH,CRITICAL \
    --no-progress \
    --format json \
    --output $SCAN_RESULTS/trivy.json \
    $IMAGE_TO_SCAN || true

trivy image \
    --severity HIGH,CRITICAL \
    --no-progress \
    $IMAGE_TO_SCAN

# 2. Grype Scan
echo ""
echo "[2/6] Running Grype vulnerability scan..."
grype $IMAGE_TO_SCAN \
    --output json \
    --file $SCAN_RESULTS/grype.json || true

grype $IMAGE_TO_SCAN \
    --only-fixed

# 3. Generate SBOM with Syft
echo ""
echo "[3/6] Generating SBOM with Syft..."
syft $IMAGE_TO_SCAN \
    --output spdx-json \
    --file $SCAN_RESULTS/sbom.spdx.json

# 4. Dockle Security Check
echo ""
echo "[4/6] Running Dockle security best practices check..."
dockle \
    --exit-code 0 \
    --format json \
    --output $SCAN_RESULTS/dockle.json \
    $IMAGE_TO_SCAN || true

dockle --exit-code 0 $IMAGE_TO_SCAN

# 5. Security Policy Validation
echo ""
echo "[5/6] Validating security policies..."
cat > /tmp/security-policy.json <<EOF
{
  "required_labels": [
    "security.scan",
    "security.user",
    "org.opencontainers.image.source"
  ],
  "forbidden_users": ["root", "0"],
  "max_image_size_mb": 100,
  "required_healthcheck": true,
  "forbidden_ports": [22, 23, 111, 2049],
  "required_user_numeric": true
}
EOF

# 6. Generate Summary Report
echo ""
echo "[6/6] Generating summary report..."
cat > $SCAN_RESULTS/summary.md <<EOF
# Security Scan Summary

## Image: $IMAGE_TO_SCAN
## Scan Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

### Vulnerability Summary
- Critical: $(jq '.Results[].Vulnerabilities[] | select(.Severity=="CRITICAL")' $SCAN_RESULTS/trivy.json 2>/dev/null | jq -s 'length')
- High: $(jq '.Results[].Vulnerabilities[] | select(.Severity=="HIGH")' $SCAN_RESULTS/trivy.json 2>/dev/null | jq -s 'length')

### Compliance Checks
- Dockle Score: $(dockle --format json $IMAGE_TO_SCAN 2>/dev/null | jq '.summary.pass' || echo "N/A")
- SBOM Generated: Yes

### Recommendations
1. Update base image to latest security patches
2. Remove unnecessary packages
3. Ensure non-root user execution
4. Enable read-only root filesystem
5. Drop all capabilities

EOF

cat $SCAN_RESULTS/summary.md

echo ""
echo "========================================="
echo "Scan complete. Results saved to $SCAN_RESULTS"
echo "========================================="

# Exit with error if critical vulnerabilities found
CRITICAL_COUNT=$(jq '.Results[].Vulnerabilities[] | select(.Severity=="CRITICAL")' $SCAN_RESULTS/trivy.json 2>/dev/null | jq -s 'length')
if [ "$CRITICAL_COUNT" -gt "0" ]; then
    echo "ERROR: Found $CRITICAL_COUNT critical vulnerabilities!"
    exit 1
fi
SCAN_SCRIPT

# ============================================================================
# STAGE 2: DOCKERFILE LINTER
# ============================================================================
FROM hadolint/hadolint:latest AS dockerfile-linter

WORKDIR /lint

# Copy Hadolint config
COPY --chmod=644 <<'HADOLINT_CONFIG' /.hadolint.yaml
ignored:
  - DL3008  # Pin versions in apt get install
  - DL3009  # Delete apt lists
  - SC1091  # Not following sourced files

trustedRegistries:
  - gcr.io
  - docker.io
  - quay.io

required-labels:
  - security.scan
  - org.opencontainers.image.source
  - org.opencontainers.image.vendor

strict: true
failure-threshold: error
HADOLINT_CONFIG

# ============================================================================
# STAGE 3: RUNTIME
# ============================================================================
FROM alpine:3.20

# Install runtime dependencies
RUN apk add --no-cache \
    docker-cli \
    curl \
    jq \
    git \
    python3 \
    py3-pip \
    && rm -rf /var/cache/apk/*

# Copy tools from scanner stage
COPY --from=scanner /usr/local/bin/trivy /usr/local/bin/
COPY --from=scanner /usr/local/bin/grype /usr/local/bin/
COPY --from=scanner /usr/local/bin/syft /usr/local/bin/
COPY --from=scanner /usr/local/bin/dockle /usr/local/bin/
COPY --from=scanner /usr/local/bin/hadolint /usr/local/bin/
COPY --from=scanner /scan/run-scan.sh /scan/

# Install Python security tools
RUN pip3 install --no-cache-dir \
    checkov \
    safety \
    bandit

WORKDIR /scan

# Security labels
LABEL purpose="security-scanning" \
      tools="trivy,grype,syft,hadolint,dockle,checkov" \
      org.opencontainers.image.title="Security Scanner" \
      org.opencontainers.image.description="Multi-tool security scanner for containers"

# Default scan script
ENTRYPOINT ["/scan/run-scan.sh"]

# Help message if no image specified
CMD ["--help"]