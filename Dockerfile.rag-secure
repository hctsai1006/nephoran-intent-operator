# Security-Hardened RAG API Dockerfile
# SECURITY LEVEL: MAXIMUM | Python Service
# Vector DB and ML workload optimized
#
# Security Features:
# - Distroless Python base
# - Non-root user (UID 65532)
# - No pip in runtime
# - Minimal attack surface
# - Read-only filesystem compatible

# ============================================================================
# STAGE 1: PYTHON DEPENDENCIES
# ============================================================================
FROM python:3.11-slim AS dependencies

# Security: Create non-root user for build
RUN groupadd -g 65532 nonroot && \
    useradd -u 65532 -g nonroot -s /bin/false -m nonroot

WORKDIR /deps

# Copy requirements
COPY requirements-rag.txt ./

# Security: Install dependencies as non-root with hash verification
USER nonroot
RUN pip install --user --no-cache-dir --no-compile \
    --require-hashes \
    --no-deps \
    -r requirements-rag.txt 2>/dev/null || \
    pip install --user --no-cache-dir --no-compile \
    -r requirements-rag.txt

# Generate dependency report for security scanning
RUN pip list --user --format=json > /deps/dependencies.json

# ============================================================================
# STAGE 2: BUILD AND COMPILE
# ============================================================================  
FROM python:3.11-slim AS builder

# Security: Minimal build tools only
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    gcc \
    python3-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create build user
RUN groupadd -g 65532 nonroot && \
    useradd -u 65532 -g nonroot -s /bin/false -m nonroot

# Copy dependencies from previous stage
COPY --from=dependencies --chown=nonroot:nonroot /home/nonroot/.local /home/nonroot/.local

# Copy application code
WORKDIR /app
COPY --chown=nonroot:nonroot rag-python/ ./

USER nonroot

# Pre-compile Python bytecode for faster startup
RUN python -m compileall -b . && \
    find . -name "*.py" -delete && \
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# ============================================================================
# STAGE 3: SECURITY SCAN
# ============================================================================
FROM python:3.11-slim AS scanner

COPY --from=builder /home/nonroot/.local /scan/deps/
COPY --from=builder /app /scan/app/

# Install safety for vulnerability scanning
RUN pip install --no-cache-dir safety

# Scan dependencies (non-blocking for build)
RUN safety check --json || true

# ============================================================================
# STAGE 4: DISTROLESS RUNTIME
# ============================================================================
FROM gcr.io/distroless/python3-debian12:nonroot

# Copy Python packages
COPY --from=builder --chown=nonroot:nonroot /home/nonroot/.local/lib/python3.11/site-packages /home/nonroot/.local/lib/python3.11/site-packages

# Copy compiled application
COPY --from=builder --chown=nonroot:nonroot /app /app

# Security labels
LABEL security.scan="required" \
      security.user="65532:65532" \
      security.read-only-root="true" \
      security.no-new-privileges="true" \
      security.python.version="3.11" \
      security.dependencies="frozen" \
      org.opencontainers.image.title="RAG API" \
      org.opencontainers.image.description="Security-hardened RAG service"

# Set Python path
ENV PYTHONPATH=/home/nonroot/.local/lib/python3.11/site-packages:/app \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    # Security: Disable debug mode
    PYTHONOPTIMIZE=2 \
    # Application settings
    PORT=5001 \
    LOG_LEVEL=warning \
    # Security: API limits
    MAX_CONTENT_LENGTH=10485760 \
    REQUEST_TIMEOUT=30 \
    RATE_LIMIT_PER_MINUTE=60 \
    # Security: Force TLS
    FORCE_HTTPS=true \
    SESSION_COOKIE_SECURE=true \
    SESSION_COOKIE_HTTPONLY=true \
    SESSION_COOKIE_SAMESITE=strict

# Non-root user (inherited from base image)
USER nonroot

WORKDIR /app

# Single port exposure
EXPOSE 5001/tcp

# Direct Python execution (no shell)
ENTRYPOINT ["python", "-O"]
CMD ["api.pyc"]