#!/bin/bash

################################################################################
# CVE Scanning Script for Nephoran Intent Operator
# Runs comprehensive vulnerability scanning using multiple tools
################################################################################

set -euo pipefail

# Configuration
NAMESPACE="${NAMESPACE:-nephoran-system}"
REPORT_DIR="security-reports"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
SCAN_REPORT="${REPORT_DIR}/cve-report-${TIMESTAMP}.md"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

# Create report directory
mkdir -p "${REPORT_DIR}"

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[✓]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

log_error() {
    echo -e "${RED}[✗]${NC} $1"
}

################################################################################
# Tool Installation Check
################################################################################
check_tools() {
    log_info "Checking required tools..."
    
    local tools=("trivy" "grype" "syft" "cosign")
    local missing_tools=()
    
    for tool in "${tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            missing_tools+=("$tool")
        fi
    done
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        log_warning "Missing tools: ${missing_tools[*]}"
        log_info "Installing missing tools..."
        
        for tool in "${missing_tools[@]}"; do
            case "$tool" in
                trivy)
                    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
                    ;;
                grype)
                    curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
                    ;;
                syft)
                    curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
                    ;;
                cosign)
                    curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
                    mv cosign-linux-amd64 /usr/local/bin/cosign
                    chmod +x /usr/local/bin/cosign
                    ;;
            esac
        done
    fi
    
    # Check for govulncheck
    if ! command -v govulncheck &> /dev/null; then
        log_info "Installing govulncheck..."
        go install golang.org/x/vuln/cmd/govulncheck@latest
    fi
    
    log_success "All required tools are available"
}

################################################################################
# Container Image Scanning
################################################################################
scan_images() {
    log_info "Scanning container images..."
    
    local images=(
        "nephoran/operator:latest"
        "nephoran/llm-processor:latest"
        "nephoran/rag-api:latest"
        "nephoran/nephio-bridge:latest"
        "nephoran/oran-adaptor:latest"
    )
    
    local critical_count=0
    local high_count=0
    
    echo "## Container Image Vulnerability Scan" >> "${SCAN_REPORT}"
    echo "" >> "${SCAN_REPORT}"
    echo "| Image | Critical | High | Medium | Low | Status |" >> "${SCAN_REPORT}"
    echo "|-------|----------|------|--------|-----|--------|" >> "${SCAN_REPORT}"
    
    for image in "${images[@]}"; do
        log_info "Scanning $image with Trivy..."
        
        # Run Trivy scan
        trivy image --severity CRITICAL,HIGH,MEDIUM,LOW \
            --format json \
            --output "${REPORT_DIR}/trivy-${image//\//-}.json" \
            "$image" 2>/dev/null || true
        
        # Parse results
        if [ -f "${REPORT_DIR}/trivy-${image//\//-}.json" ]; then
            local crit=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="CRITICAL")] | length' "${REPORT_DIR}/trivy-${image//\//-}.json" 2>/dev/null || echo "0")
            local high=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="HIGH")] | length' "${REPORT_DIR}/trivy-${image//\//-}.json" 2>/dev/null || echo "0")
            local med=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="MEDIUM")] | length' "${REPORT_DIR}/trivy-${image//\//-}.json" 2>/dev/null || echo "0")
            local low=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="LOW")] | length' "${REPORT_DIR}/trivy-${image//\//-}.json" 2>/dev/null || echo "0")
            
            critical_count=$((critical_count + crit))
            high_count=$((high_count + high))
            
            local status="✅ PASS"
            if [ "$crit" -gt 0 ] || [ "$high" -gt 0 ]; then
                status="❌ FAIL"
            fi
            
            echo "| $image | $crit | $high | $med | $low | $status |" >> "${SCAN_REPORT}"
        fi
    done
    
    echo "" >> "${SCAN_REPORT}"
    
    if [ "$critical_count" -eq 0 ] && [ "$high_count" -eq 0 ]; then
        log_success "No critical or high vulnerabilities found in container images"
        echo "**✅ Result: 0 Critical/High CVEs in container images**" >> "${SCAN_REPORT}"
    else
        log_error "Found $critical_count critical and $high_count high vulnerabilities"
        echo "**❌ Result: $critical_count Critical and $high_count High CVEs found**" >> "${SCAN_REPORT}"
    fi
    
    echo "" >> "${SCAN_REPORT}"
}

################################################################################
# Go Module Scanning
################################################################################
scan_go_modules() {
    log_info "Scanning Go modules with govulncheck..."
    
    echo "## Go Module Vulnerability Scan" >> "${SCAN_REPORT}"
    echo "" >> "${SCAN_REPORT}"
    
    # Run govulncheck
    govulncheck -json ./... > "${REPORT_DIR}/govulncheck.json" 2>&1 || true
    
    # Parse results
    local vuln_count=$(jq '.Vulnerabilities | length' "${REPORT_DIR}/govulncheck.json" 2>/dev/null || echo "0")
    
    if [ "$vuln_count" -eq 0 ]; then
        log_success "No vulnerabilities found in Go modules"
        echo "**✅ Result: 0 vulnerabilities in Go modules**" >> "${SCAN_REPORT}"
    else
        log_warning "Found $vuln_count vulnerabilities in Go modules"
        echo "**⚠️ Result: $vuln_count vulnerabilities found (review required)**" >> "${SCAN_REPORT}"
        
        # List vulnerabilities
        echo "" >> "${SCAN_REPORT}"
        echo "### Go Module Vulnerabilities:" >> "${SCAN_REPORT}"
        jq -r '.Vulnerabilities[] | "- \(.Module): \(.ID) (\(.Summary))"' "${REPORT_DIR}/govulncheck.json" >> "${SCAN_REPORT}" 2>/dev/null || true
    fi
    
    echo "" >> "${SCAN_REPORT}"
}

################################################################################
# Filesystem Scanning
################################################################################
scan_filesystem() {
    log_info "Scanning filesystem with Grype..."
    
    echo "## Filesystem Vulnerability Scan" >> "${SCAN_REPORT}"
    echo "" >> "${SCAN_REPORT}"
    
    # Run Grype scan
    grype dir:. --output json > "${REPORT_DIR}/grype.json" 2>/dev/null || true
    
    # Parse results
    local crit=$(jq '[.matches[] | select(.vulnerability.severity=="Critical")] | length' "${REPORT_DIR}/grype.json" 2>/dev/null || echo "0")
    local high=$(jq '[.matches[] | select(.vulnerability.severity=="High")] | length' "${REPORT_DIR}/grype.json" 2>/dev/null || echo "0")
    local med=$(jq '[.matches[] | select(.vulnerability.severity=="Medium")] | length' "${REPORT_DIR}/grype.json" 2>/dev/null || echo "0")
    local low=$(jq '[.matches[] | select(.vulnerability.severity=="Low")] | length' "${REPORT_DIR}/grype.json" 2>/dev/null || echo "0")
    
    echo "| Severity | Count | Status |" >> "${SCAN_REPORT}"
    echo "|----------|-------|--------|" >> "${SCAN_REPORT}"
    echo "| Critical | $crit | $([ "$crit" -eq 0 ] && echo '✅' || echo '❌') |" >> "${SCAN_REPORT}"
    echo "| High | $high | $([ "$high" -eq 0 ] && echo '✅' || echo '❌') |" >> "${SCAN_REPORT}"
    echo "| Medium | $med | ℹ️ |" >> "${SCAN_REPORT}"
    echo "| Low | $low | ℹ️ |" >> "${SCAN_REPORT}"
    
    echo "" >> "${SCAN_REPORT}"
    
    if [ "$crit" -eq 0 ] && [ "$high" -eq 0 ]; then
        log_success "No critical or high vulnerabilities found in filesystem"
        echo "**✅ Result: 0 Critical/High CVEs in filesystem**" >> "${SCAN_REPORT}"
    else
        log_error "Found $crit critical and $high high vulnerabilities in filesystem"
        echo "**❌ Result: $crit Critical and $high High CVEs found**" >> "${SCAN_REPORT}"
    fi
    
    echo "" >> "${SCAN_REPORT}"
}

################################################################################
# SBOM Generation
################################################################################
generate_sbom() {
    log_info "Generating Software Bill of Materials (SBOM)..."
    
    echo "## Software Bill of Materials" >> "${SCAN_REPORT}"
    echo "" >> "${SCAN_REPORT}"
    
    # Generate SBOM with Syft
    syft . -o json > "${REPORT_DIR}/sbom.json" 2>/dev/null
    syft . -o cyclonedx-json > "${REPORT_DIR}/sbom-cyclonedx.json" 2>/dev/null
    syft . -o spdx-json > "${REPORT_DIR}/sbom-spdx.json" 2>/dev/null
    
    # Count components
    local component_count=$(jq '.artifacts | length' "${REPORT_DIR}/sbom.json" 2>/dev/null || echo "0")
    
    echo "- **Total Components**: $component_count" >> "${SCAN_REPORT}"
    echo "- **SBOM Formats Generated**:" >> "${SCAN_REPORT}"
    echo "  - Syft JSON: ${REPORT_DIR}/sbom.json" >> "${SCAN_REPORT}"
    echo "  - CycloneDX: ${REPORT_DIR}/sbom-cyclonedx.json" >> "${SCAN_REPORT}"
    echo "  - SPDX: ${REPORT_DIR}/sbom-spdx.json" >> "${SCAN_REPORT}"
    
    log_success "SBOM generated successfully"
    echo "" >> "${SCAN_REPORT}"
}

################################################################################
# Compliance Check
################################################################################
check_compliance() {
    log_info "Checking security compliance..."
    
    echo "## Security Compliance Check" >> "${SCAN_REPORT}"
    echo "" >> "${SCAN_REPORT}"
    
    echo "| Requirement | Status | Details |" >> "${SCAN_REPORT}"
    echo "|------------|--------|---------|" >> "${SCAN_REPORT}"
    
    # Check distroless images
    if grep -r "gcr.io/distroless" Dockerfile* > /dev/null 2>&1; then
        echo "| Distroless Images | ✅ | Using distroless base images |" >> "${SCAN_REPORT}"
    else
        echo "| Distroless Images | ❌ | Not using distroless images |" >> "${SCAN_REPORT}"
    fi
    
    # Check non-root user
    if grep -r "USER.*nonroot\|USER.*65532" Dockerfile* > /dev/null 2>&1; then
        echo "| Non-root User | ✅ | Running as non-root user |" >> "${SCAN_REPORT}"
    else
        echo "| Non-root User | ❌ | May run as root |" >> "${SCAN_REPORT}"
    fi
    
    # Check TLS 1.3
    if grep -r "MinVersion.*tls.VersionTLS13\|TLS_VERSION.*1.3" . > /dev/null 2>&1; then
        echo "| TLS 1.3 | ✅ | TLS 1.3 enforced |" >> "${SCAN_REPORT}"
    else
        echo "| TLS 1.3 | ⚠️ | TLS 1.3 not verified |" >> "${SCAN_REPORT}"
    fi
    
    # Check SOPS encryption
    if [ -f ".sops.yaml" ]; then
        echo "| Secret Encryption | ✅ | SOPS configured |" >> "${SCAN_REPORT}"
    else
        echo "| Secret Encryption | ❌ | SOPS not configured |" >> "${SCAN_REPORT}"
    fi
    
    # Check RBAC
    if [ -f "deployments/rbac/roles.yaml" ]; then
        echo "| Least-privilege RBAC | ✅ | RBAC configured |" >> "${SCAN_REPORT}"
    else
        echo "| Least-privilege RBAC | ⚠️ | RBAC needs review |" >> "${SCAN_REPORT}"
    fi
    
    # Check OPA policies
    if [ -f "deployments/opa/opa-configmap.yaml" ]; then
        echo "| OPA Validation | ✅ | OPA policies configured |" >> "${SCAN_REPORT}"
    else
        echo "| OPA Validation | ❌ | OPA not configured |" >> "${SCAN_REPORT}"
    fi
    
    echo "" >> "${SCAN_REPORT}"
    log_success "Compliance check completed"
}

################################################################################
# Generate Summary Report
################################################################################
generate_summary() {
    log_info "Generating summary report..."
    
    echo "# 🔒 Security Hardening Report" > "${SCAN_REPORT}.tmp"
    echo "" >> "${SCAN_REPORT}.tmp"
    echo "**Generated**: $(date)" >> "${SCAN_REPORT}.tmp"
    echo "**Project**: Nephoran Intent Operator" >> "${SCAN_REPORT}.tmp"
    echo "**Scan Type**: Comprehensive CVE and Security Analysis" >> "${SCAN_REPORT}.tmp"
    echo "" >> "${SCAN_REPORT}.tmp"
    
    echo "## 🎯 Executive Summary" >> "${SCAN_REPORT}.tmp"
    echo "" >> "${SCAN_REPORT}.tmp"
    
    # Check if we achieved zero critical/high
    local total_critical_high=$(grep -E "Critical|High" "${SCAN_REPORT}" | grep -E "[1-9]" | wc -l || echo "0")
    
    if [ "$total_critical_high" -eq 0 ]; then
        echo "### ✅ **SECURITY HARDENING SUCCESSFUL**" >> "${SCAN_REPORT}.tmp"
        echo "" >> "${SCAN_REPORT}.tmp"
        echo "**0 Critical/High CVEs Found** - All security objectives achieved!" >> "${SCAN_REPORT}.tmp"
    else
        echo "### ⚠️ **SECURITY HARDENING IN PROGRESS**" >> "${SCAN_REPORT}.tmp"
        echo "" >> "${SCAN_REPORT}.tmp"
        echo "Some vulnerabilities require attention." >> "${SCAN_REPORT}.tmp"
    fi
    
    echo "" >> "${SCAN_REPORT}.tmp"
    
    # Append detailed results
    cat "${SCAN_REPORT}" >> "${SCAN_REPORT}.tmp"
    
    # Add recommendations
    echo "## 📋 Recommendations" >> "${SCAN_REPORT}.tmp"
    echo "" >> "${SCAN_REPORT}.tmp"
    echo "1. **Continue Regular Scanning**: Run this script weekly" >> "${SCAN_REPORT}.tmp"
    echo "2. **Update Dependencies**: Keep all dependencies current" >> "${SCAN_REPORT}.tmp"
    echo "3. **Monitor Security Advisories**: Subscribe to security bulletins" >> "${SCAN_REPORT}.tmp"
    echo "4. **Implement Security Gates**: Block deployments with CVEs" >> "${SCAN_REPORT}.tmp"
    echo "5. **Regular Audits**: Perform quarterly security audits" >> "${SCAN_REPORT}.tmp"
    echo "" >> "${SCAN_REPORT}.tmp"
    
    # Move to final report
    mv "${SCAN_REPORT}.tmp" "${SCAN_REPORT}"
    
    log_success "Report generated: ${SCAN_REPORT}"
}

################################################################################
# Main Execution
################################################################################
main() {
    echo -e "${BOLD}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${BOLD}   Nephoran Intent Operator - CVE Security Scanning${NC}"
    echo -e "${BOLD}═══════════════════════════════════════════════════════════════${NC}"
    echo ""
    
    check_tools
    
    # Initialize report
    echo "" > "${SCAN_REPORT}"
    
    # Run all scans
    scan_images
    scan_go_modules
    scan_filesystem
    generate_sbom
    check_compliance
    
    # Generate final report
    generate_summary
    
    echo ""
    echo -e "${BOLD}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${GREEN}${BOLD}   Scanning Complete!${NC}"
    echo -e "${BOLD}═══════════════════════════════════════════════════════════════${NC}"
    echo ""
    echo "📊 Reports generated in: ${REPORT_DIR}/"
    echo "📄 Main report: ${SCAN_REPORT}"
    echo ""
    
    # Return appropriate exit code
    if grep -q "0 Critical/High CVEs" "${SCAN_REPORT}"; then
        exit 0
    else
        exit 1
    fi
}

# Run main function
main "$@"