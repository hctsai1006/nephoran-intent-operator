# Production-Ready Dockerfile for Nephoran Intent Operator
# Consolidates security-hardened variants with multi-service support
# Supports: Go services, Python RAG API, and security scanning
# Security Level: MAXIMUM | Attack Surface: MINIMAL
# Compliance: CIS Docker Benchmark, NIST 800-190, OWASP Container Security

ARG SERVICE_TYPE=go
ARG SERVICE_NAME
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG TARGETOS=linux
ARG TARGETARCH=amd64

# ============================================================================
# STAGE 1: GOLANG BUILD STAGE
# ============================================================================
FROM --platform=$BUILDPLATFORM golang:1.24-alpine AS go-dependencies

# Security: Create non-root build user
RUN addgroup -g 65532 -S nonroot && \
    adduser -u 65532 -S nonroot -G nonroot

# Security: Install minimal build dependencies
RUN apk add --no-cache git ca-certificates tzdata && \
    apk upgrade --no-cache && \
    rm -rf /var/cache/apk/*

WORKDIR /deps
COPY --chown=nonroot:nonroot go.mod go.sum ./

USER nonroot:nonroot
RUN go mod download && \
    go mod verify

# ============================================================================
# STAGE 2: GOLANG BUILD STAGE
# ============================================================================
FROM --platform=$BUILDPLATFORM golang:1.24-alpine AS go-builder

ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=v2.0.0
ARG SERVICE_NAME
ARG TARGETOS
ARG TARGETARCH

# Security: Install minimal build tools
RUN apk add --no-cache git ca-certificates tzdata && \
    apk upgrade --no-cache

RUN addgroup -g 65532 -S nonroot && \
    adduser -u 65532 -S nonroot -G nonroot

WORKDIR /build

# Copy dependencies from previous stage
COPY --from=go-dependencies /go/pkg /go/pkg

# Copy source code
COPY --chown=nonroot:nonroot cmd/ cmd/
COPY --chown=nonroot:nonroot pkg/ pkg/
COPY --chown=nonroot:nonroot api/ api/
COPY --chown=nonroot:nonroot go.mod go.sum ./
COPY --chown=nonroot:nonroot main.go .

USER nonroot:nonroot

# Security-hardened build with service selection
RUN set -ex; \
    case "$SERVICE_NAME" in \
        "llm-processor") \
            CMD_PATH="./cmd/llm-processor/main.go" \
            ;; \
        "nephio-bridge") \
            CMD_PATH="./cmd/nephio-bridge/main.go" \
            ;; \
        "oran-adaptor") \
            CMD_PATH="./cmd/oran-adaptor/main.go" \
            ;; \
        "manager") \
            CMD_PATH="./main.go" \
            ;; \
        *) \
            echo "Unknown Go service: $SERVICE_NAME" && exit 1 \
            ;; \
    esac; \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build \
        -buildmode=pie \
        -trimpath \
        -mod=readonly \
        -ldflags="-w -s -linkmode=external -extldflags '-static -fno-PIC -D_FORTIFY_SOURCE=2 -fstack-protector-all' \
                 -X main.version=${VERSION} \
                 -X main.buildDate=${BUILD_DATE} \
                 -X main.gitCommit=${VCS_REF} \
                 -buildid=" \
        -tags="netgo osusergo static_build" \
        -o /build/service \
        $CMD_PATH

# Verify static binary
RUN file /build/service | grep -q "statically linked" && \
    file /build/service | grep -q "stripped"

# ============================================================================
# STAGE 3: PYTHON DEPENDENCIES STAGE (for RAG API)
# ============================================================================
FROM python:3.11-slim AS python-dependencies

# Security: Create non-root user
RUN groupadd -g 65532 nonroot && \
    useradd -u 65532 -g nonroot -s /bin/false -m nonroot

WORKDIR /deps
COPY requirements-rag.txt ./

# Security: Install dependencies with hash verification when possible
USER nonroot
RUN pip install --user --no-cache-dir --no-compile \
    -r requirements-rag.txt && \
    pip list --user --format=json > /deps/dependencies.json

# ============================================================================
# STAGE 4: PYTHON BUILD STAGE (for RAG API)
# ============================================================================
FROM python:3.11-slim AS python-builder

# Security: Install minimal build tools
RUN apt-get update && \
    apt-get install -y --no-install-recommends gcc python3-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN groupadd -g 65532 nonroot && \
    useradd -u 65532 -g nonroot -s /bin/false -m nonroot

# Copy dependencies and application
COPY --from=python-dependencies --chown=nonroot:nonroot /home/nonroot/.local /home/nonroot/.local
COPY --chown=nonroot:nonroot rag-python/ /app/

WORKDIR /app
USER nonroot

# Pre-compile Python bytecode for performance
RUN python -m compileall -b . && \
    find . -name "*.py" -delete && \
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# ============================================================================
# STAGE 5: SECURITY SCANNER STAGE
# ============================================================================
FROM alpine:3.20 AS security-tools

# Install security scanning tools
RUN apk add --no-cache curl docker python3 py3-pip jq git && \
    rm -rf /var/cache/apk/*

# Install Trivy
RUN curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | \
    sh -s -- -b /usr/local/bin v0.48.0

# Install Grype
RUN curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | \
    sh -s -- -b /usr/local/bin

# Install Syft
RUN curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | \
    sh -s -- -b /usr/local/bin

# Install security scanning script
COPY --chmod=755 <<'SCAN_SCRIPT' /usr/local/bin/security-scan.sh
#!/bin/sh
set -e

IMAGE_TO_SCAN=${1:-$IMAGE_TO_SCAN}
if [ -z "$IMAGE_TO_SCAN" ]; then
    echo "Usage: $0 <image-name>"
    exit 1
fi

echo "Running comprehensive security scan for: $IMAGE_TO_SCAN"

# Run Trivy vulnerability scan
echo "[1/3] Trivy vulnerability scan..."
trivy image --severity HIGH,CRITICAL --no-progress $IMAGE_TO_SCAN

# Run Grype scan
echo "[2/3] Grype vulnerability scan..."
grype $IMAGE_TO_SCAN --only-fixed || true

# Generate SBOM
echo "[3/3] Generating SBOM..."
syft $IMAGE_TO_SCAN --output spdx-json=sbom.json
echo "SBOM generated: sbom.json"

echo "Security scan completed"
SCAN_SCRIPT

# ============================================================================
# STAGE 6: PRODUCTION RUNTIME STAGE
# ============================================================================
FROM gcr.io/distroless/static:nonroot AS go-runtime

ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=v2.0.0
ARG SERVICE_NAME
ARG TARGETARCH

# Import certificates and timezone data
COPY --from=go-builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=go-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy binary with restricted permissions
COPY --from=go-builder --chmod=555 /build/service /service

# Security and compliance labels
LABEL security.scan="required" \
      security.user="65532:65532" \
      security.capabilities="drop:ALL" \
      security.read-only-root="true" \
      security.no-new-privileges="true" \
      security.seccomp="runtime/default" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.title="Nephoran ${SERVICE_NAME}" \
      org.opencontainers.image.description="Production-ready ${SERVICE_NAME} service" \
      org.opencontainers.image.vendor="Nephoran" \
      org.opencontainers.image.source="https://github.com/thc1006/nephoran-intent-operator" \
      service.name="${SERVICE_NAME}" \
      build.architecture="${TARGETARCH}"

# Non-root user (inherited from distroless)
USER 65532:65532

# Security environment variables
ENV GOGC=100 \
    GOMEMLIMIT=512MiB \
    GOMAXPROCS=2 \
    TLS_MIN_VERSION=1.3

# Health check without shell access
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=3 \
    CMD ["/service", "--health-check"]

ENTRYPOINT ["/service"]

# ============================================================================
# STAGE 7: PYTHON RUNTIME STAGE (for RAG API)
# ============================================================================
FROM gcr.io/distroless/python3-debian12:nonroot AS python-runtime

ARG BUILD_DATE
ARG VCS_REF  
ARG VERSION=v2.0.0

# Copy Python packages and application
COPY --from=python-builder --chown=nonroot:nonroot /home/nonroot/.local/lib/python3.11/site-packages /home/nonroot/.local/lib/python3.11/site-packages
COPY --from=python-builder --chown=nonroot:nonroot /app /app

# Security labels
LABEL security.scan="required" \
      security.user="65532:65532" \
      security.read-only-root="true" \
      security.python.version="3.11" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.title="Nephoran RAG API" \
      org.opencontainers.image.description="Production-ready RAG service"

# Security environment
ENV PYTHONPATH=/home/nonroot/.local/lib/python3.11/site-packages:/app \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONOPTIMIZE=2 \
    PORT=5001 \
    LOG_LEVEL=warning

USER nonroot
WORKDIR /app

ENTRYPOINT ["python", "-O"]
CMD ["api.pyc"]

# ============================================================================
# STAGE 8: SECURITY SCANNER RUNTIME
# ============================================================================
FROM alpine:3.20 AS scanner-runtime

# Copy security tools
COPY --from=security-tools /usr/local/bin/trivy /usr/local/bin/
COPY --from=security-tools /usr/local/bin/grype /usr/local/bin/
COPY --from=security-tools /usr/local/bin/syft /usr/local/bin/
COPY --from=security-tools /usr/local/bin/security-scan.sh /usr/local/bin/

# Install runtime dependencies
RUN apk add --no-cache docker-cli curl jq && \
    rm -rf /var/cache/apk/*

LABEL purpose="security-scanning" \
      tools="trivy,grype,syft" \
      org.opencontainers.image.title="Security Scanner"

ENTRYPOINT ["/usr/local/bin/security-scan.sh"]

# ============================================================================
# FINAL STAGE SELECTION
# ============================================================================
FROM ${SERVICE_TYPE}-runtime AS final

# Expose ports based on service type
# Port selection will be handled by build args or runtime configuration
EXPOSE 8080 8081 8082 5001

CMD ["--help"]