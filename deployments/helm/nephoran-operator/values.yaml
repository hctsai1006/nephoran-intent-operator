# Default values for nephoran-operator
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []

# Feature flags
rag:
  enabled: false
  # RAG endpoint compatibility configuration
  compat:
    # When true, use legacy /process_intent endpoint; when false, use new /process endpoint
    enableLegacyProcessIntent: true

ml:
  enabled: false

git:
  tokenSecret: ""
  concurrentPushLimit: 4  # Maximum concurrent git push operations

# Nephoran Operator Controller (Main Controller)
nephoranOperator:
  enabled: true
  replicaCount: 1
  
  image:
    repository: "thc1006/nephoran-operator"
    tag: "latest"
    pullPolicy: IfNotPresent
    
  service:
    type: ClusterIP
    port: 9443
    targetPort: 9443
    
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
      
  podSecurityContext:
    fsGroup: 65534
    
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
      
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Leader election configuration
  leaderElection:
    enabled: false
    leaseDuration: "15s"
    renewDeadline: "10s"
    retryPeriod: "2s"
  
  # TLS checksum (for automatic pod restarts on certificate rotation)
  tlsChecksum: ""
  
  # Health check configuration
  healthCheck:
    enabled: true
    livenessProbe:
      httpGet:
        path: /healthz
        port: 8081
      failureThreshold: 3
      periodSeconds: 10
      initialDelaySeconds: 15
      timeoutSeconds: 5
    readinessProbe:
      httpGet:
        path: /readyz
        port: 8081
      failureThreshold: 3
      periodSeconds: 10
      initialDelaySeconds: 5
      timeoutSeconds: 5
    startupProbe:
      httpGet:
        path: /healthz
        port: 8081
      failureThreshold: 30
      periodSeconds: 10
      initialDelaySeconds: 10
      timeoutSeconds: 3

# Note: LLM Processor configuration moved below to avoid duplication

# RAG API configuration (conditional deployment)
ragApi:
  enabled: false  # Controlled by rag.enabled
  replicaCount: 1
  
  image:
    repository: python
    tag: "3.11-slim"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 5001
    targetPort: 5001
  
  # Environment variables
  env:
    - name: WEAVIATE_URL
      value: "http://weaviate.weaviate.svc.cluster.local:8080"
    - name: OPENAI_API_KEY
      valueFrom:
        secretKeyRef:
          name: openai-credentials
          key: apiKey
  
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 256Mi
  
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# RBAC
rbac:
  create: true

# Ingress
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: nephoran-operator.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Monitoring
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
  prometheusRule:
    enabled: false
    rules: []

# Service Mesh configuration
serviceMesh:
  enabled: false

# Network Policy configuration
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  denyAll: false
  ingress: []
  egress: []

# Security Configuration
security:
  # Enable mTLS for service-to-service communication
  mtls:
    enabled: false
  
  # Pod Security Standards
  podSecurityStandards:
    enforce: "restricted"
    audit: "restricted"
    warn: "restricted"
  
  # Network Policies
  networkPolicies:
    enabled: true
    allowNamespaces: []
  
  # Security scanning
  scanning:
    enabled: true
    trivy:
      enabled: true
    falco:
      enabled: false

# Secrets Configuration (SOPS-encrypted)
secrets:
  # API Keys secret
  apiKeys:
    name: "nephoran-api-keys"
    namespace: "nephoran-system"
  
  # Database credentials secret
  database:
    name: "nephoran-database-credentials"
    namespace: "nephoran-system"
  
  # Authentication secrets
  auth:
    name: "nephoran-auth-secrets"
    namespace: "nephoran-system"
  
  # TLS certificates secret
  tls:
    name: "nephoran-tls-certificates"
    namespace: "nephoran-system"
  
  # mTLS certificates secret
  mtls:
    name: "nephoran-mtls-certificates"
    namespace: "nephoran-system"
  
  # O-RAN credentials secret
  oran:
    name: "nephoran-oran-credentials"
    namespace: "nephoran-system"
  
  # External secrets operator (if using)
  external:
    enabled: false
    backend: "vault"  # vault, aws-secrets-manager, azure-keyvault, gcp-secret-manager
    refreshInterval: "1h"

# LLM Processor Configuration
llmProcessor:
  enabled: true
  replicaCount: 1
  
  # Log level
  logLevel: "info"
  
  # Metrics security configuration
  metrics:
    # When false (default), metrics are only accessible from allowed CIDR blocks
    # When true, metrics are publicly accessible (not recommended for production)
    exposePublicly: false
    # CIDR blocks allowed to access metrics when exposePublicly is false
    # Default includes common private network ranges
    allowedCIDRs:
      - "10.0.0.0/8"        # Private Class A networks
      - "172.16.0.0/12"     # Private Class B networks  
      - "192.168.0.0/16"    # Private Class C networks
      - "127.0.0.0/8"       # Localhost
  
  # LLM provider configuration
  providers:
    openai:
      enabled: true
      model: "gpt-4o-mini"
    anthropic:
      enabled: false
      model: "claude-3-sonnet"
    azure:
      enabled: false
      deployment: "gpt-4"
    google:
      enabled: false
      model: "gemini-pro"
  
  # Database configuration
  database:
    enabled: false
    type: "postgres"
  
  image:
    repository: thc1006/nephoran-llm-processor
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  
  # Health check configuration
  healthCheck:
    enabled: true
    livenessProbe:
      httpGet:
        path: /healthz
        port: 8080
      failureThreshold: 3
      periodSeconds: 10
      initialDelaySeconds: 30
      timeoutSeconds: 5
    readinessProbe:
      httpGet:
        path: /readyz
        port: 8080
      failureThreshold: 3
      periodSeconds: 10
      initialDelaySeconds: 5
      timeoutSeconds: 5
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Node selection
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  
  # Pod security context
  podSecurityContext:
    fsGroup: 65534
  
  # RAG service configuration (conditional)
  ragService:
    # Base URL for RAG API service (endpoint path determined by rag.compat.enableLegacyProcessIntent)
    url: "http://rag-api:5001"
  
  # Pod disruption budget
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
  
  # Horizontal pod autoscaling
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# Nephio Bridge configuration
nephioBridge:
  enabled: false
  replicaCount: 1
  
  image:
    repository: "thc1006/nephio-bridge"
    tag: "latest"
    pullPolicy: IfNotPresent
    
  service:
    type: ClusterIP
    port: 8082
    targetPort: 8082
    
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
      
  podSecurityContext:
    fsGroup: 65534
    
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
      
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  podDisruptionBudget:
    enabled: false
    minAvailable: 1

# O-RAN Adaptor configuration
oranAdaptor:
  enabled: false
  replicaCount: 1
  
  image:
    repository: "thc1006/oran-adaptor"
    tag: "latest"
    pullPolicy: IfNotPresent
    
  service:
    type: ClusterIP
    port: 8083
    targetPort: 8083
    
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
      
  podSecurityContext:
    fsGroup: 65534
    
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
      
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  podDisruptionBudget:
    enabled: false
    minAvailable: 1

# Weaviate Vector Database
weaviate:
  enabled: false
  service:
    port: 8080
    grpcPort: 50051
  
  podDisruptionBudget:
    enabled: false
    minAvailable: 1