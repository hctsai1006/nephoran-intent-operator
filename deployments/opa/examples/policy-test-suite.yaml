apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-policy-test-suite
  namespace: nephoran-operator
  labels:
    app: opa-sidecar
    component: test-suite
data:
  test-suite.rego: |
    # OPA Policy Test Suite for Nephoran Intent Operator
    # This provides comprehensive testing for all policy rules
    
    package nephoran.test.suite
    
    import rego.v1
    import data.nephoran.api.validation
    import data.nephoran.security.validation as security
    import data.nephoran.oran.compliance
    
    # Test valid intent processing request
    test_valid_intent_request if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "authorization": "Bearer validtoken",
                "content-length": "450"
            },
            "body": "{\"intent\": \"Deploy AMF network function\", \"network_function\": {\"type\": \"AMF\"}}",
            "client_ip": "10.0.1.100"
        }
        
        count(validation.deny) == 0
    }
    
    # Test SQL injection detection
    test_sql_injection_detection if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "authorization": "Bearer validtoken",
                "content-length": "200"
            },
            "body": "{\"intent\": \"Deploy AMF'; DROP TABLE users; --\"}",
            "client_ip": "192.168.1.100"
        }
        
        count(validation.deny) > 0
        some msg in validation.deny
        contains(msg, "SQL injection")
    }
    
    # Test XSS attack detection
    test_xss_attack_detection if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "authorization": "Bearer validtoken",
                "content-length": "150"
            },
            "body": "{\"intent\": \"Deploy <script>alert('XSS')</script> network function\"}",
            "client_ip": "192.168.1.101"
        }
        
        count(validation.deny) > 0
        some msg in validation.deny
        contains(msg, "XSS")
    }
    
    # Test command injection detection
    test_command_injection_detection if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "authorization": "Bearer validtoken",
                "content-length": "180"
            },
            "body": "{\"intent\": \"Deploy AMF && rm -rf /etc/passwd network function\"}",
            "client_ip": "192.168.1.102"
        }
        
        count(security.deny) > 0
        some msg in security.deny
        contains(msg, "Command injection")
    }
    
    # Test request size limits
    test_request_size_limits if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "authorization": "Bearer validtoken",
                "content-length": "3000000"
            },
            "body": "large payload",
            "client_ip": "192.168.1.103"
        }
        
        count(validation.deny) > 0
        some msg in validation.deny
        contains(msg, "exceeds limit")
    }
    
    # Test missing authorization
    test_missing_authorization if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "content-length": "100"
            },
            "body": "{\"intent\": \"Deploy AMF network function\"}",
            "client_ip": "192.168.1.104"
        }
        
        count(validation.deny) > 0
        some msg in validation.deny
        contains(msg, "Authorization header required")
    }
    
    # Test invalid O-RAN interface
    test_invalid_oran_interface if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "authorization": "Bearer validtoken",
                "content-length": "200"
            },
            "body": "{\"intent\": \"Deploy network function\", \"oran_config\": {\"interface_type\": \"INVALID_INTERFACE\"}}",
            "client_ip": "192.168.1.105"
        }
        
        count(compliance.deny) > 0
        some msg in compliance.deny
        contains(msg, "Invalid O-RAN interface")
    }
    
    # Test invalid network function type
    test_invalid_network_function_type if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "authorization": "Bearer validtoken",
                "content-length": "200"
            },
            "body": "{\"intent\": \"Deploy network function\", \"network_function\": {\"type\": \"INVALID_NF\"}}",
            "client_ip": "192.168.1.106"
        }
        
        count(compliance.deny) > 0
        some msg in compliance.deny
        contains(msg, "Invalid network function type")
    }
    
    # Test invalid 5G slice type
    test_invalid_slice_type if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "authorization": "Bearer validtoken",
                "content-length": "200"
            },
            "body": "{\"intent\": \"Deploy network slice\", \"slice_config\": {\"type\": \"INVALID_SLICE\"}}",
            "client_ip": "192.168.1.107"
        }
        
        count(compliance.deny) > 0
        some msg in compliance.deny
        contains(msg, "Invalid 5G slice type")
    }
    
    # Test invalid 5QI value
    test_invalid_5qi_value if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "authorization": "Bearer validtoken",
                "content-length": "200"
            },
            "body": "{\"intent\": \"Deploy network slice\", \"qos_config\": {\"five_qi\": 999}}",
            "client_ip": "192.168.1.108"
        }
        
        count(compliance.deny) > 0
        some msg in compliance.deny
        contains(msg, "Invalid 5QI value")
    }
    
    # Test suspicious User-Agent
    test_suspicious_user_agent if {
        input := {
            "method": "GET",
            "path": "/healthz",
            "headers": {
                "user-agent": "sqlmap/1.0.0 automated security scanner"
            },
            "client_ip": "192.168.1.109"
        }
        
        count(security.deny) > 0
        some msg in security.deny
        contains(msg, "Suspicious User-Agent")
    }
    
    # Test health check bypass
    test_health_check_bypass if {
        input := {
            "method": "GET",
            "path": "/healthz",
            "headers": {
                "user-agent": "kubernetes/1.25.0 health-checker"
            },
            "client_ip": "10.0.1.1"
        }
        
        count(validation.deny) == 0
    }
    
    # Test path traversal detection
    test_path_traversal_detection if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "authorization": "Bearer validtoken",
                "content-length": "180"
            },
            "body": "{\"intent\": \"Deploy ../../etc/passwd network function\"}",
            "client_ip": "192.168.1.110"
        }
        
        count(security.deny) > 0
        some msg in security.deny
        contains(msg, "Path traversal")
    }
    
    # Test JSON validation
    test_json_validation if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "authorization": "Bearer validtoken",
                "content-length": "100"
            },
            "body": "{invalid json}",
            "client_ip": "192.168.1.111"
        }
        
        count(validation.deny) > 0
        some msg in validation.deny
        contains(msg, "valid JSON")
    }
    
    # Test intent length validation
    test_intent_length_validation if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "application/json",
                "authorization": "Bearer validtoken",
                "content-length": "50"
            },
            "body": "{\"intent\": \"short\"}",
            "client_ip": "192.168.1.112"
        }
        
        count(validation.deny) > 0
        some msg in validation.deny
        contains(msg, "at least 10 characters")
    }
    
    # Test content type validation
    test_content_type_validation if {
        input := {
            "method": "POST",
            "path": "/process",
            "headers": {
                "content-type": "text/plain",
                "authorization": "Bearer validtoken",
                "content-length": "100"
            },
            "body": "plain text content",
            "client_ip": "192.168.1.113"
        }
        
        count(validation.deny) > 0
        some msg in validation.deny
        contains(msg, "application/json")
    }

  run-tests.sh: |
    #!/bin/bash
    
    # Run OPA policy test suite
    set -euo pipefail
    
    echo "Running OPA Policy Test Suite for Nephoran Intent Operator"
    echo "========================================================="
    
    # Colors
    GREEN='\033[0;32m'
    RED='\033[0;31m'
    YELLOW='\033[1;33m'
    NC='\033[0m'
    
    # Test results
    PASSED=0
    FAILED=0
    
    # Function to run a single test
    run_test() {
        local test_name=$1
        echo -n "Testing: ${test_name}... "
        
        if opa eval -d test-suite.rego "data.nephoran.test.suite.${test_name}" --format json | jq -e '.result[0].expressions[0].value == true' > /dev/null; then
            echo -e "${GREEN}PASS${NC}"
            ((PASSED++))
        else
            echo -e "${RED}FAIL${NC}"
            ((FAILED++))
        fi
    }
    
    # Run all tests
    echo "Starting test execution..."
    echo
    
    run_test "test_valid_intent_request"
    run_test "test_sql_injection_detection"
    run_test "test_xss_attack_detection"
    run_test "test_command_injection_detection"
    run_test "test_request_size_limits"
    run_test "test_missing_authorization"
    run_test "test_invalid_oran_interface"
    run_test "test_invalid_network_function_type"
    run_test "test_invalid_slice_type"
    run_test "test_invalid_5qi_value"
    run_test "test_suspicious_user_agent"
    run_test "test_health_check_bypass"
    run_test "test_path_traversal_detection"
    run_test "test_json_validation"
    run_test "test_intent_length_validation"
    run_test "test_content_type_validation"
    
    # Print summary
    echo
    echo "Test Results Summary:"
    echo "===================="
    echo -e "Passed: ${GREEN}${PASSED}${NC}"
    echo -e "Failed: ${RED}${FAILED}${NC}"
    echo -e "Total:  $((PASSED + FAILED))"
    echo -e "Success Rate: $(( PASSED * 100 / (PASSED + FAILED) ))%"
    
    if [[ ${FAILED} -eq 0 ]]; then
        echo -e "${GREEN}All tests passed!${NC}"
        exit 0
    else
        echo -e "${RED}Some tests failed!${NC}"
        exit 1
    fi