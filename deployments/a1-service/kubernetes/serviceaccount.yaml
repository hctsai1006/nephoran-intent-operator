apiVersion: v1
kind: ServiceAccount
metadata:
  name: a1-policy-service
  namespace: nephoran-a1
  labels:
    app.kubernetes.io/name: a1-policy-service
    app.kubernetes.io/instance: a1-policy-service
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: policy-management
    app.kubernetes.io/part-of: nephoran-intent-operator
    app.kubernetes.io/managed-by: kubernetes
  annotations:
    # Azure AD integration (if using Azure)
    azure.workload.identity/client-id: ""
    # AWS IAM integration (if using AWS)
    eks.amazonaws.com/role-arn: ""
    # GCP Workload Identity (if using GCP)
    iam.gke.io/gcp-service-account: ""
automountServiceAccountToken: false
---
apiVersion: v1
kind: Secret
metadata:
  name: a1-policy-service-token
  namespace: nephoran-a1
  labels:
    app.kubernetes.io/name: a1-policy-service
    app.kubernetes.io/instance: a1-policy-service
    app.kubernetes.io/component: policy-management
    app.kubernetes.io/part-of: nephoran-intent-operator
  annotations:
    kubernetes.io/service-account.name: a1-policy-service
type: kubernetes.io/service-account-token
---
# Role for A1 Policy Service operations
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: a1-policy-service
  namespace: nephoran-a1
  labels:
    app.kubernetes.io/name: a1-policy-service
    app.kubernetes.io/instance: a1-policy-service
    app.kubernetes.io/component: policy-management
    app.kubernetes.io/part-of: nephoran-intent-operator
rules:
# Allow reading ConfigMaps and Secrets
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
# Allow reading pods for health checks
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
  resourceNames: ["a1-policy-service-*"]
# Allow creating events for audit
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
# Allow updating own pod status
- apiGroups: [""]
  resources: ["pods/status"]
  verbs: ["update"]
  resourceNames: ["a1-policy-service-*"]
---
# RoleBinding for A1 Policy Service
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: a1-policy-service
  namespace: nephoran-a1
  labels:
    app.kubernetes.io/name: a1-policy-service
    app.kubernetes.io/instance: a1-policy-service
    app.kubernetes.io/component: policy-management
    app.kubernetes.io/part-of: nephoran-intent-operator
subjects:
- kind: ServiceAccount
  name: a1-policy-service
  namespace: nephoran-a1
roleRef:
  kind: Role
  name: a1-policy-service
  apiGroup: rbac.authorization.k8s.io
---
# ClusterRole for cross-namespace operations (if needed)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: a1-policy-service-cluster
  labels:
    app.kubernetes.io/name: a1-policy-service
    app.kubernetes.io/instance: a1-policy-service
    app.kubernetes.io/component: policy-management
    app.kubernetes.io/part-of: nephoran-intent-operator
rules:
# Allow reading NetworkIntents from nephoran-system namespace
- apiGroups: ["nephoran.io"]
  resources: ["networkintents"]
  verbs: ["get", "list", "watch"]
# Allow updating NetworkIntent status
- apiGroups: ["nephoran.io"]
  resources: ["networkintents/status"]
  verbs: ["update"]
# Allow reading nodes for deployment context
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
# Allow reading ingress for external access
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list"]
---
# ClusterRoleBinding for cross-namespace operations
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: a1-policy-service-cluster
  labels:
    app.kubernetes.io/name: a1-policy-service
    app.kubernetes.io/instance: a1-policy-service
    app.kubernetes.io/component: policy-management
    app.kubernetes.io/part-of: nephoran-intent-operator
subjects:
- kind: ServiceAccount
  name: a1-policy-service
  namespace: nephoran-a1
roleRef:
  kind: ClusterRole
  name: a1-policy-service-cluster
  apiGroup: rbac.authorization.k8s.io