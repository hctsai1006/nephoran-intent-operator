version: '3.8'

# =============================================================================
# Consolidated Docker Compose Configuration
# =============================================================================
# Uses the 3 essential Dockerfiles for all services
# Supports production and development environments
# =============================================================================

x-common-env: &common-env
  LOG_LEVEL: ${LOG_LEVEL:-info}
  METRICS_ENABLED: "true"
  TZ: UTC

x-common-labels: &common-labels
  com.nephoran.project: "nephoran-intent-operator"
  com.nephoran.version: "${VERSION:-latest}"

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 5s
  retries: 3
  start_period: 15s

services:
  # =============================================================================
  # LLM Processor Service
  # =============================================================================
  llm-processor:
    build:
      context: ../
      dockerfile: ${DOCKERFILE:-Dockerfile}
      args:
        SERVICE: llm-processor
        SERVICE_TYPE: go
        VERSION: ${VERSION:-latest}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    image: nephoran/llm-processor:${VERSION:-latest}
    container_name: llm-processor
    ports:
      - "8080:8080"
      - "${DEBUG_PORT_LLM:-40000}:40000"  # Debug port for development
    environment:
      <<: *common-env
      SERVICE_NAME: llm-processor
      PORT: 8080
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LLM_MODEL: ${LLM_MODEL:-gpt-4o-mini}
      MAX_TOKENS: ${MAX_TOKENS:-2000}
      TEMPERATURE: ${TEMPERATURE:-0.7}
    labels:
      <<: *common-labels
      com.nephoran.service: "llm-processor"
    healthcheck:
      <<: *default-healthcheck
      test: ["/service", "--health-check"]
    restart: unless-stopped
    networks:
      - nephoran-network
    volumes:
      - llm-cache:/cache
      - ./configs:/configs:ro

  # =============================================================================
  # Nephio Bridge Service
  # =============================================================================
  nephio-bridge:
    build:
      context: ../
      dockerfile: ${DOCKERFILE:-Dockerfile}
      args:
        SERVICE: nephio-bridge
        SERVICE_TYPE: go
        VERSION: ${VERSION:-latest}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    image: nephoran/nephio-bridge:${VERSION:-latest}
    container_name: nephio-bridge
    ports:
      - "8081:8081"
      - "${DEBUG_PORT_NEPHIO:-40001}:40000"
    environment:
      <<: *common-env
      SERVICE_NAME: nephio-bridge
      PORT: 8081
      NEPHIO_ENDPOINT: ${NEPHIO_ENDPOINT:-http://nephio-porch:8080}
      GIT_REPO_URL: ${GIT_REPO_URL}
      GIT_TOKEN: ${GIT_TOKEN}
    labels:
      <<: *common-labels
      com.nephoran.service: "nephio-bridge"
    healthcheck:
      <<: *default-healthcheck
      test: ["/service", "--health-check"]
    restart: unless-stopped
    networks:
      - nephoran-network
    depends_on:
      - llm-processor

  # =============================================================================
  # O-RAN Adaptor Service
  # =============================================================================
  oran-adaptor:
    build:
      context: ../
      dockerfile: ${DOCKERFILE:-Dockerfile}
      args:
        SERVICE: oran-adaptor
        SERVICE_TYPE: go
        VERSION: ${VERSION:-latest}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    image: nephoran/oran-adaptor:${VERSION:-latest}
    container_name: oran-adaptor
    ports:
      - "8082:8082"
      - "${DEBUG_PORT_ORAN:-40002}:40000"
    environment:
      <<: *common-env
      SERVICE_NAME: oran-adaptor
      PORT: 8082
      A1_ENDPOINT: ${A1_ENDPOINT:-http://a1-mediator:9995}
      O1_ENDPOINT: ${O1_ENDPOINT:-http://o1-controller:8181}
      E2_ENDPOINT: ${E2_ENDPOINT:-http://e2-termination:36421}
    labels:
      <<: *common-labels
      com.nephoran.service: "oran-adaptor"
    healthcheck:
      <<: *default-healthcheck
      test: ["/service", "--health-check"]
    restart: unless-stopped
    networks:
      - nephoran-network
    depends_on:
      - nephio-bridge

  # =============================================================================
  # RAG API Service (Python)
  # =============================================================================
  rag-api:
    build:
      context: ../
      dockerfile: ${DOCKERFILE:-Dockerfile}
      args:
        SERVICE: rag-api
        SERVICE_TYPE: python
        VERSION: ${VERSION:-latest}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    image: nephoran/rag-api:${VERSION:-latest}
    container_name: rag-api
    ports:
      - "5001:5001"
      - "${DEBUG_PORT_RAG:-5678}:5678"  # Python debugpy port
    environment:
      <<: *common-env
      SERVICE_NAME: rag-api
      PORT: 5001
      FLASK_ENV: ${FLASK_ENV:-production}
      WEAVIATE_URL: ${WEAVIATE_URL:-http://weaviate:8080}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-text-embedding-3-large}
    labels:
      <<: *common-labels
      com.nephoran.service: "rag-api"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
    restart: unless-stopped
    networks:
      - nephoran-network
    volumes:
      - rag-data:/data
      - ./knowledge_base:/knowledge_base:ro
    depends_on:
      - weaviate

  # =============================================================================
  # Weaviate Vector Database
  # =============================================================================
  weaviate:
    image: semitechnologies/weaviate:${WEAVIATE_VERSION:-1.23.0}
    container_name: weaviate
    ports:
      - "8083:8080"
      - "50051:50051"  # gRPC port
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      DEFAULT_VECTORIZER_MODULE: "text2vec-openai"
      ENABLE_MODULES: "text2vec-openai,generative-openai"
      OPENAI_APIKEY: ${OPENAI_API_KEY}
      CLUSTER_HOSTNAME: "weaviate"
    labels:
      <<: *common-labels
      com.nephoran.service: "weaviate"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
    restart: unless-stopped
    networks:
      - nephoran-network
    volumes:
      - weaviate-data:/var/lib/weaviate

  # =============================================================================
  # Prometheus Monitoring (Optional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    labels:
      <<: *common-labels
      com.nephoran.service: "prometheus"
    restart: unless-stopped
    networks:
      - nephoran-network
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    profiles:
      - monitoring

  # =============================================================================
  # Grafana Dashboard (Optional)
  # =============================================================================
  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-latest}
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: ${GF_PLUGINS:-}
    labels:
      <<: *common-labels
      com.nephoran.service: "grafana"
    restart: unless-stopped
    networks:
      - nephoran-network
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    profiles:
      - monitoring

# =============================================================================
# Networks
# =============================================================================
networks:
  nephoran-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  llm-cache:
    driver: local
  rag-data:
    driver: local
  weaviate-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# =============================================================================
# Extension for Development Environment
# =============================================================================
# To use development images with hot-reload and debugging:
# 1. Set DOCKERFILE=Dockerfile.dev
# 2. Mount source code volumes for hot-reload
# 3. Set appropriate debug environment variables
#
# Example:
#   DOCKERFILE=Dockerfile.dev docker-compose up
#
# Or create docker-compose.override.yml with development overrides