name: "Security Scan"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily security scans at 4 AM UTC
    - cron: '0 4 * * *'

env:
  GO_VERSION: '1.24.1'

jobs:
  security-scan:
    name: "Daily Security Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      security-events: write
      contents: read

    steps:
    - name: "Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "Setup Go"
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: "Install Security Tools"
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        go install github.com/securecodewarrior/github-action-gosec@latest
        go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest

    - name: "Run Comprehensive Security Scan"
      run: |
        mkdir -p security-reports
        
        # Vulnerability scan
        echo "Running vulnerability scan..."
        govulncheck -json ./... > security-reports/vulns.json || true
        govulncheck ./... | tee security-reports/vulns.txt
        
        # SAST scan with gosec
        echo "Running SAST scan..."
        gosec -fmt sarif -out security-reports/gosec.sarif ./... || true
        gosec -fmt json -out security-reports/gosec.json ./... || true
        
        # Generate SBOM
        echo "Generating SBOM..."
        cyclonedx-gomod mod -json -output-file security-reports/sbom.json

    - name: "Scan Dependencies with Nancy"
      run: |
        go list -json -deps ./... | docker run --rm -i sonatypecommunity/nancy:latest sleuth --loud > security-reports/nancy.txt || true

    - name: "Check Critical Vulnerabilities"
      run: |
        # Check for critical vulnerabilities and fail if found
        if grep -q "HIGH\|CRITICAL" security-reports/vulns.txt; then
          echo "‚ö†Ô∏è  Critical or High severity vulnerabilities found!"
          grep "HIGH\|CRITICAL" security-reports/vulns.txt
          exit 1
        else
          echo "‚úÖ No critical vulnerabilities found"
        fi

    - name: "Upload SARIF Results"
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: security-reports/gosec.sarif

    - name: "Upload Security Reports"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_number }}
        path: security-reports/
        retention-days: 90

    - name: "Create Security Issue"
      if: failure() && github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security Vulnerability Detected - ${new Date().toISOString()}`,
            body: `üö® **Security Alert**\n\nCritical or high severity vulnerabilities have been detected in the codebase.\n\n**Run**: [${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n**Action Required**: Please review the security scan results and remediate the vulnerabilities immediately.\n\n**Security Reports**: Available in the workflow artifacts.`,
            labels: ['security', 'vulnerability', 'priority:critical']
          })