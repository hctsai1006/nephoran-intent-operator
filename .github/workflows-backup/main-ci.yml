name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency only)'
        type: boolean
        default: false

env:
  GO_VERSION: '1.24'
  COVERAGE_THRESHOLD: 90
  REGISTRY: us-central1-docker.pkg.dev/poised-elf-466913-q2/nephoran

jobs:
  # =============================================================================
  # Setup and Validation
  # =============================================================================
  setup:
    name: Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      go-cache-key: ${{ steps.cache.outputs.go-cache-key }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION=$(git describe --tags --always --dirty)
          else
            VERSION="pr-${{ github.event.number }}-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Generate Cache Keys
        id: cache
        run: |
          echo "go-cache-key=go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', '**/go.mod') }}" >> $GITHUB_OUTPUT

  # =============================================================================
  # Code Quality & Linting
  # =============================================================================
  quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run Linting
        run: |
          golangci-lint run --timeout=10m --issues-exit-code=1 ./...

      - name: Verify Formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "‚ùå Code formatting issues found"
            gofmt -s -l .
            exit 1
          fi

      - name: Static Analysis
        run: staticcheck ./...

      - name: Vulnerability Check
        run: govulncheck ./...

  # =============================================================================
  # Testing with Coverage
  # =============================================================================
  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: [setup, quality]
    if: inputs.skip_tests != true
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Test Environment
        run: |
          go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
          setup-envtest use 1.29.0 --bin-dir /tmp/k8s
          echo "KUBEBUILDER_ASSETS=/tmp/k8s" >> $GITHUB_ENV

      - name: Run Tests
        env:
          REDIS_URL: redis://localhost:6379
        run: |
          mkdir -p coverage
          case "${{ matrix.test-type }}" in
            "unit")
              go test -v -race -coverprofile=coverage/unit.out -covermode=atomic ./pkg/... ./cmd/...
              ;;
            "integration")
              go test -v -race -coverprofile=coverage/integration.out -covermode=atomic ./tests/integration/...
              ;;
          esac

      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-type }}
          path: coverage/
          retention-days: 7

  # =============================================================================
  # Coverage Analysis
  # =============================================================================
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: inputs.skip_tests != true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download Coverage Data
        uses: actions/download-artifact@v4
        with:
          path: coverage-data/

      - name: Merge Coverage Reports
        run: |
          go install github.com/wadey/gocovmerge@latest
          find coverage-data -name "*.out" -exec cat {} \; > merged-coverage.out
          go tool cover -func=merged-coverage.out > coverage-report.txt
          go tool cover -html=merged-coverage.out -o coverage-report.html

      - name: Check Coverage Threshold
        run: |
          coverage_percent=$(go tool cover -func=merged-coverage.out | grep total: | awk '{print $3}' | sed 's/%//')
          echo "Coverage: ${coverage_percent}%"
          if (( $(echo "${coverage_percent} >= ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "‚úÖ Coverage threshold met"
          else
            echo "‚ùå Coverage below threshold: ${coverage_percent}% < ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          fi

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            merged-coverage.out
            coverage-report.txt
            coverage-report.html
          retention-days: 30

  # =============================================================================
  # Build & Push
  # =============================================================================
  build:
    name: Build & Push
    runs-on: ubuntu-latest
    needs: [setup, quality, coverage]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/llm-processor:${{ needs.setup.outputs.version }}
            ${{ env.REGISTRY }}/llm-processor:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # Status Check
  # =============================================================================
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [setup, quality, coverage, build]
    if: always()
    steps:
      - name: Check Results
        run: |
          echo "## üîÑ CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality**: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage**: ${{ needs.coverage.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.quality.result }}" != "success" || "${{ needs.coverage.result }}" != "success" ]]; then
            echo "‚ùå CI Pipeline Failed"
            exit 1
          fi
          echo "‚úÖ CI Pipeline Successful"