name: "Security Analysis Suite"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive security scan daily at 4 AM UTC
    - cron: '0 4 * * *'
  workflow_dispatch:

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  GO_VERSION: '1.24'

jobs:
  # =============================================================================
  # CodeQL Advanced Security Analysis
  # =============================================================================
  codeql:
    name: "CodeQL Analysis (${{ matrix.language }})"
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'javascript', 'python' ]

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Initialize CodeQL"
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality,security-experimental
          config: |
            name: "CodeQL Config"
            paths:
              - "**"
            paths-ignore:
              - "**/*.md"
              - "**/*.txt"
              - "**/testdata/**"
              - "**/vendor/**"
              - "**/node_modules/**"

      - name: "Setup Go"
        if: matrix.language == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: "Setup Node.js"
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: "Setup Python"
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: "Build Go Project"
        if: matrix.language == 'go'
        run: |
          go mod download
          go mod verify
          go build ./...

      - name: "Install Python Dependencies"
        if: matrix.language == 'python'
        run: |
          if [ -f requirements-rag.txt ]; then
            pip install -r requirements-rag.txt
          fi

      - name: "Perform CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

      - name: "Upload CodeQL Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results-${{ matrix.language }}
          path: |
            /home/runner/work/_temp/codeql_databases/
          retention-days: 30

  # =============================================================================
  # Go Security Scanning
  # =============================================================================
  go-security:
    name: "Go Security Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Setup Go"
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: "Cache Go Dependencies"
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-security-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-security-${{ env.GO_VERSION }}-

      - name: "Install Security Tools"
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest

      - name: "Download Dependencies"
        run: |
          go mod download
          go mod verify

      - name: "Run Vulnerability Scan (govulncheck)"
        run: |
          echo "=== Running govulncheck ==="
          mkdir -p security-reports
          
          # JSON output for processing
          govulncheck -json ./... > security-reports/vulns.json || true
          
          # Human-readable output
          govulncheck ./... | tee security-reports/vulns.txt

      - name: "Run Static Analysis (gosec)"
        run: |
          echo "=== Running gosec Security Analysis ==="
          
          # Generate SARIF report for GitHub Security tab
          gosec -fmt sarif -out security-reports/gosec.sarif ./... || true
          
          # Generate JSON report for processing
          gosec -fmt json -out security-reports/gosec.json ./... || true
          
          # Generate human-readable report
          gosec -fmt text -out security-reports/gosec.txt ./... || true

      - name: "Generate SBOM"
        run: |
          echo "=== Generating Software Bill of Materials ==="
          cyclonedx-gomod mod -json -output-file security-reports/sbom.json

      - name: "Scan Dependencies with Nancy"
        continue-on-error: true
        run: |
          echo "=== Running Nancy dependency scanner ==="
          go list -json -deps ./... | docker run --rm -i sonatypecommunity/nancy:latest sleuth --loud > security-reports/nancy.txt || true

      - name: "Process Vulnerability Results"
        id: vuln-check
        run: |
          echo "=== Processing Security Scan Results ==="
          
          # Count vulnerabilities by severity
          HIGH_VULNS=0
          CRITICAL_VULNS=0
          
          if [ -f security-reports/vulns.txt ]; then
            HIGH_VULNS=$(grep -c "HIGH" security-reports/vulns.txt || echo "0")
            CRITICAL_VULNS=$(grep -c "CRITICAL" security-reports/vulns.txt || echo "0")
          fi
          
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          echo "High vulnerabilities: $HIGH_VULNS"
          
          # Set outputs for downstream jobs
          echo "critical_count=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
          echo "high_count=$HIGH_VULNS" >> $GITHUB_OUTPUT
          
          # Check gosec issues
          GOSEC_ISSUES=0
          if [ -f security-reports/gosec.json ]; then
            GOSEC_ISSUES=$(jq '.Issues | length' security-reports/gosec.json 2>/dev/null || echo "0")
          fi
          
          echo "gosec_issues=$GOSEC_ISSUES" >> $GITHUB_OUTPUT
          echo "GoSec issues found: $GOSEC_ISSUES"

      - name: "Upload SARIF Results"
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security-reports/gosec.sarif
          category: "gosec"

      - name: "Upload Security Reports"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: go-security-reports
          path: security-reports/
          retention-days: 90

      - name: "Security Gate Check"
        run: |
          echo "=== Security Gate Evaluation ==="
          
          CRITICAL=${{ steps.vuln-check.outputs.critical_count }}
          HIGH=${{ steps.vuln-check.outputs.high_count }}
          GOSEC=${{ steps.vuln-check.outputs.gosec_issues }}
          
          # Security gate thresholds
          MAX_CRITICAL=0
          MAX_HIGH=5
          MAX_GOSEC=10
          
          FAILED=false
          
          if [ "$CRITICAL" -gt "$MAX_CRITICAL" ]; then
            echo "❌ Critical vulnerabilities: $CRITICAL (max allowed: $MAX_CRITICAL)"
            FAILED=true
          else
            echo "✅ Critical vulnerabilities: $CRITICAL (max allowed: $MAX_CRITICAL)"
          fi
          
          if [ "$HIGH" -gt "$MAX_HIGH" ]; then
            echo "❌ High vulnerabilities: $HIGH (max allowed: $MAX_HIGH)"
            FAILED=true
          else
            echo "✅ High vulnerabilities: $HIGH (max allowed: $MAX_HIGH)"
          fi
          
          if [ "$GOSEC" -gt "$MAX_GOSEC" ]; then
            echo "❌ GoSec issues: $GOSEC (max allowed: $MAX_GOSEC)"
            FAILED=true
          else
            echo "✅ GoSec issues: $GOSEC (max allowed: $MAX_GOSEC)"
          fi
          
          if [ "$FAILED" = "true" ]; then
            echo ""
            echo "Security gate FAILED. Please review and fix the security issues."
            exit 1
          else
            echo ""
            echo "✅ Security gate PASSED"
          fi

  # =============================================================================
  # Container Security Scanning
  # =============================================================================
  container-security:
    name: "Container Security Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Build Container Image"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: nephoran-operator:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: "Run Trivy Container Scan"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nephoran-operator:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: "Run Trivy for JSON Report"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nephoran-operator:security-scan'
          format: 'json'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: "Install Syft for SBOM"
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: "Generate Container SBOM"
        run: |
          mkdir -p container-security-reports
          syft nephoran-operator:security-scan -o spdx-json > container-security-reports/container-sbom.json

      - name: "Process Container Scan Results"
        id: container-check
        run: |
          echo "=== Processing Container Security Results ==="
          
          if [ -f trivy-results.json ]; then
            # Extract vulnerability counts
            CRITICAL=$(jq '[.Results[]? | .Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json)
            HIGH=$(jq '[.Results[]? | .Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results.json)
            MEDIUM=$(jq '[.Results[]? | .Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-results.json)
            
            echo "Container vulnerabilities found:"
            echo "- Critical: $CRITICAL"
            echo "- High: $HIGH" 
            echo "- Medium: $MEDIUM"
            
            echo "critical_count=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high_count=$HIGH" >> $GITHUB_OUTPUT
            echo "medium_count=$MEDIUM" >> $GITHUB_OUTPUT
          else
            echo "No Trivy results found"
            echo "critical_count=0" >> $GITHUB_OUTPUT
            echo "high_count=0" >> $GITHUB_OUTPUT
            echo "medium_count=0" >> $GITHUB_OUTPUT
          fi

      - name: "Upload Trivy SARIF Results"
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: "trivy-container"

      - name: "Upload Container Security Reports"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-security-reports
          path: |
            trivy-results.json
            trivy-results.sarif
            container-security-reports/
          retention-days: 90

      - name: "Container Security Gate"
        run: |
          echo "=== Container Security Gate ==="
          
          CRITICAL=${{ steps.container-check.outputs.critical_count }}
          HIGH=${{ steps.container-check.outputs.high_count }}
          
          # Container security thresholds
          MAX_CRITICAL=0
          MAX_HIGH=3
          
          if [ "$CRITICAL" -gt "$MAX_CRITICAL" ]; then
            echo "❌ Container has $CRITICAL critical vulnerabilities (max: $MAX_CRITICAL)"
            exit 1
          fi
          
          if [ "$HIGH" -gt "$MAX_HIGH" ]; then
            echo "❌ Container has $HIGH high vulnerabilities (max: $MAX_HIGH)"
            exit 1
          fi
          
          echo "✅ Container security scan passed"

  # =============================================================================
  # Security Summary and Reporting
  # =============================================================================
  security-summary:
    name: "Security Summary"
    runs-on: ubuntu-latest
    needs: [codeql, go-security, container-security]
    if: always()
    
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Generate Security Summary"
        run: |
          echo "## 🔒 Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql.result == 'success' && '✅ PASSED' || '❌ FAILED' }} | Advanced static analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Go Security Scan | ${{ needs.go-security.result == 'success' && '✅ PASSED' || '❌ FAILED' }} | govulncheck, gosec, SBOM |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-security.result == 'success' && '✅ PASSED' || '❌ FAILED' }} | Trivy container scan |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: "Determine Overall Security Status"
        id: security-status
        run: |
          if [[ "${{ needs.codeql.result }}" == "success" && 
                "${{ needs.go-security.result }}" == "success" && 
                "${{ needs.container-security.result }}" == "success" ]]; then
            echo "✅ All security scans passed"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ One or more security scans failed"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: "Create Security Issue"
        if: steps.security-status.outputs.status == 'failure' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const codeql = '${{ needs.codeql.result }}';
            const goSecurity = '${{ needs.go-security.result }}';
            const containerSecurity = '${{ needs.container-security.result }}';
            
            let failedScans = [];
            if (codeql !== 'success') failedScans.push('CodeQL Analysis');
            if (goSecurity !== 'success') failedScans.push('Go Security Scan');
            if (containerSecurity !== 'success') failedScans.push('Container Security');
            
            if (failedScans.length > 0) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Security Scan Failures - ${new Date().toISOString()}`,
                body: `🚨 **Security Alert**\n\n**Failed Scans:** ${failedScans.join(', ')}\n\n**Run:** [${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n**Branch:** ${context.ref}\n**Commit:** ${context.sha}\n\n**Action Required:** Please review the security scan results and remediate any vulnerabilities immediately.\n\n**Security Reports:** Available in the workflow artifacts.`,
                labels: ['security', 'vulnerability', 'priority:critical'],
                assignees: [context.actor]
              });
            }

      - name: "Update Commit Status"
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ steps.security-status.outputs.status }}',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'Security Analysis Suite',
              context: 'security/analysis'
            });