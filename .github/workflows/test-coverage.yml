name: Test Coverage

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      weaviate:
        image: semitechnologies/weaviate:1.22.4
        ports:
          - 8080:8080
        env:
          QUERY_DEFAULTS_LIMIT: 25
          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
          PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
          DEFAULT_VECTORIZER_MODULE: 'none'
          ENABLE_MODULES: 'text2vec-openai,generative-openai'
          CLUSTER_HOSTNAME: 'node1'
        options: >-
          --health-cmd="wget --no-verbose --tries=3 --spider http://localhost:8080/v1/.well-known/ready || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        go mod download
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install test dependencies
      run: |
        go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
        setup-envtest use 1.29.0

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Create coverage directory
      run: mkdir -p coverage

    - name: Run RAG package tests
      run: |
        go test -v -race -coverprofile=coverage/rag.out -covermode=atomic ./pkg/rag/...
        go tool cover -html=coverage/rag.out -o coverage/rag_coverage.html
      env:
        WEAVIATE_URL: http://localhost:8080

    - name: Run Security package tests
      run: |
        go test -v -race -coverprofile=coverage/security.out -covermode=atomic ./pkg/security/...
        go tool cover -html=coverage/security.out -o coverage/security_coverage.html

    - name: Run all package tests with coverage
      run: |
        for pkg in $(go list ./pkg/... | grep -v test); do
          echo "Testing $pkg..."
          go test -v -race -coverprofile=coverage/$(echo $pkg | sed 's/.*\///').out -covermode=atomic $pkg || true
        done

    - name: Merge coverage profiles
      run: |
        echo "mode: atomic" > coverage/merged.out
        grep -h -v "mode: atomic" coverage/*.out >> coverage/merged.out 2>/dev/null || true
        go tool cover -html=coverage/merged.out -o coverage/coverage.html
        go tool cover -func=coverage/merged.out > coverage/coverage.txt

    - name: Run integration tests
      run: |
        setup-envtest use 1.29.0 --bin-dir /tmp/k8s
        export KUBEBUILDER_ASSETS=/tmp/k8s
        go test -v -race -coverprofile=coverage/integration.out -covermode=atomic ./tests/integration/... || echo "Integration tests completed with some failures"
      env:
        WEAVIATE_URL: http://localhost:8080

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage/merged.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below 90% threshold"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets 90% threshold"
        fi

    - name: Generate coverage summary
      run: |
        echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Overall Coverage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        tail -1 coverage/coverage.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Package Coverage Details" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        head -20 coverage/coverage.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/merged.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage/
        retention-days: 30

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverageText = fs.readFileSync('coverage/coverage.txt', 'utf8');
          const totalCoverage = coverageText.split('\n').slice(-2)[0];
          
          const comment = `## 📊 Test Coverage Report
          
          ${totalCoverage}
          
          <details>
          <summary>📋 Package Coverage Details</summary>
          
          \`\`\`
          ${coverageText.split('\n').slice(0, 20).join('\n')}
          \`\`\`
          
          </details>
          
          Coverage reports have been uploaded as artifacts and are available for download.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=10m --enable=revive,gofmt,goimports,misspell,vet,ineffassign,unconvert,goconst,gocyclo,unparam

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec-results.sarif

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Build all binaries
      run: |
        make build-all
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: bin/
        retention-days: 7