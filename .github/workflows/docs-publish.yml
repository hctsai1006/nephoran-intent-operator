name: Documentation Publishing

on:
  push:
    branches: 
      - main
      - docs/**
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs-publish.yml'
  pull_request:
    branches: 
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/mkdocs.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material mkdocs-mermaid2-plugin
          pip install mkdocs-swagger-ui-tag mkdocs-open-in-new-tab
          pip install mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-minify-plugin mkdocs-redirects
          pip install mkdocs-awesome-pages-plugin mkdocs-macros-plugin
          pip install pymdown-extensions markdown-callouts
          pip install mkdocs-glightbox mkdocs-git-authors-plugin

      - name: Generate API documentation
        run: |
          # Create API docs directory if it doesn't exist
          mkdir -p docs/api/generated
          
          # Generate OpenAPI documentation from specs
          if [ -f "docs/api/openapi-spec.yaml" ]; then
            echo "Generating OpenAPI documentation..."
            # Convert OpenAPI spec to Markdown (you may want to use swagger-codegen or similar)
            cp docs/api/openapi-spec.yaml docs/api/generated/
          fi
          
          # Generate CRD documentation if kubectl is available
          if command -v kubectl &> /dev/null; then
            echo "Generating CRD documentation..."
            mkdir -p docs/api/crds
            
            # Generate CRD documentation from the deployments/crds directory
            if [ -d "deployments/crds" ]; then
              for crd_file in deployments/crds/*.yaml; do
                if [ -f "$crd_file" ]; then
                  filename=$(basename "$crd_file" .yaml)
                  echo "# ${filename} CRD Reference" > "docs/api/crds/${filename}.md"
                  echo "" >> "docs/api/crds/${filename}.md"
                  echo '```yaml' >> "docs/api/crds/${filename}.md"
                  cat "$crd_file" >> "docs/api/crds/${filename}.md"
                  echo '```' >> "docs/api/crds/${filename}.md"
                fi
              done
            fi
          fi

      - name: Validate documentation links (dry run)
        continue-on-error: true
        run: |
          echo "Pre-build link validation..."
          # Install markdown-link-check
          npm install -g markdown-link-check
          
          # Check main documentation files
          find docs -name "*.md" -not -path "*/node_modules/*" -exec markdown-link-check {} \; || true

      - name: Build documentation
        run: |
          # Set site URL for proper canonical links
          export SITE_URL="${{ steps.pages.outputs.base_url }}"
          mkdocs build --clean --strict

      - name: Optimize built documentation
        run: |
          # Create robots.txt
          cat > site/robots.txt << EOF
          User-agent: *
          Allow: /
          
          Sitemap: ${{ steps.pages.outputs.base_url }}/sitemap.xml
          EOF
          
          # Create .nojekyll to ensure GitHub Pages serves the content correctly
          touch site/.nojekyll
          
          # Validate that critical pages exist
          if [ ! -f "site/index.html" ]; then
            echo "Error: index.html not generated"
            exit 1
          fi
          
          echo "Documentation build completed successfully"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  # Deployment job
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Link checking job (post-deployment)
  link-check:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: |
          echo "Waiting 30 seconds for deployment to be fully available..."
          sleep 30

      - name: Check deployed site links
        uses: lycheeverse/lychee-action@v1.9.3
        with:
          args: |
            --verbose
            --no-progress
            --exclude-loopback
            --exclude-private
            --exclude-mail
            --max-retries 3
            --retry-wait-time 5
            --timeout 30
            --accept 200,201,202,204,206,300,301,302,303,304,307,308,429
            ${{ needs.deploy.outputs.page_url }}
          fail: false  # Don't fail the workflow on broken links, just report them

      - name: Create link check report
        if: always()
        run: |
          echo "Link check completed. See action logs for details."
          # You can add additional reporting here if needed