# Enhanced Security and Supply Chain Validation
# Comprehensive security scanning with multiple tools, SARIF uploads, and detailed reporting

name: "🔒 Enhanced Security Validation"

on:
  push:
    branches: [ main, develop, release/* ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile*'
      - '.github/workflows/enhanced-security.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile*'
  schedule:
    # Run comprehensive scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - quick
          - supply-chain
          - containers
          - compliance
      fail_on_high:
        description: 'Fail on HIGH severity findings'
        required: false
        default: true
        type: boolean
      upload_sarif:
        description: 'Upload SARIF results to GitHub Security'
        required: false
        default: true
        type: boolean

concurrency:
  group: security-${{ github.ref }}-${{ github.event.inputs.scan_type || 'comprehensive' }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  GO_VERSION: '1.24.1'
  REPORTS_DIR: './security-reports'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write
  packages: read
  pull-requests: write

jobs:
  # =============================================================================
  # Supply Chain Security and SBOM Generation
  # =============================================================================
  supply-chain-security:
    name: "📦 Supply Chain Security"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.scan_type == 'comprehensive' || github.event.inputs.scan_type == 'supply-chain' || github.event_name != 'workflow_dispatch'
    
    outputs:
      sbom-generated: ${{ steps.sbom.outputs.generated }}
      dependencies-count: ${{ steps.analysis.outputs.deps_count }}
      
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🐹 Setup Go with Checksum Verification"
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          check-latest: true

      - name: "🔐 Configure Supply Chain Security"
        run: |
          echo "🔐 Configuring supply chain security settings..."
          echo "GOPROXY: $GOPROXY"
          echo "GOSUMDB: $GOSUMDB"
          go env

      - name: "🔧 Install Supply Chain Tools"
        run: |
          # Install tools with version pinning for reproducibility
          echo "🔧 Installing supply chain security tools..."
          
          # CycloneDX for SBOM generation
          go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@v1.7.0
          
          # Syft for comprehensive SBOM
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin v1.0.1
          
          # Grype for vulnerability scanning
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin v0.76.1
          
          # Nancy for vulnerability scanning
          go install github.com/sonatypecommunity/nancy@latest
          
          echo "✅ Supply chain tools installed"

      - name: "✅ Verify Module Integrity"
        run: |
          echo "✅ Verifying Go module integrity..."
          go mod verify
          go mod graph > ${{ env.REPORTS_DIR }}/dependency-graph.txt
          echo "✅ Module integrity verified"

      - name: "📋 Generate Comprehensive SBOM"
        id: sbom
        run: |
          echo "📋 Generating comprehensive Software Bill of Materials..."
          mkdir -p ${{ env.REPORTS_DIR }}/sbom
          
          # Generate CycloneDX SBOM (JSON and XML)
          cyclonedx-gomod mod -json -output-file ${{ env.REPORTS_DIR }}/sbom/sbom-cyclonedx.json
          cyclonedx-gomod mod -xml -output-file ${{ env.REPORTS_DIR }}/sbom/sbom-cyclonedx.xml
          
          # Generate SPDX SBOM with Syft
          syft . -o spdx-json > ${{ env.REPORTS_DIR }}/sbom/sbom-spdx.json
          syft . -o spdx-tag-value > ${{ env.REPORTS_DIR }}/sbom/sbom-spdx.spdx
          
          # Generate simple dependency list
          go list -m -f '{{.Path}}@{{.Version}}' all > ${{ env.REPORTS_DIR }}/sbom/dependencies.txt
          
          # Generate detailed module info
          go list -m -json all > ${{ env.REPORTS_DIR }}/sbom/modules-detailed.json
          
          echo "generated=true" >> $GITHUB_OUTPUT
          echo "✅ SBOM generation completed"

      - name: "🔍 Vulnerability Scanning with Multiple Tools"
        run: |
          echo "🔍 Running vulnerability scans with multiple tools..."
          mkdir -p ${{ env.REPORTS_DIR }}/vulnerabilities
          
          # Grype scan against SBOM
          echo "Running Grype scan..."
          grype sbom:${{ env.REPORTS_DIR }}/sbom/sbom-spdx.json \
            --output json \
            --file ${{ env.REPORTS_DIR }}/vulnerabilities/grype-results.json || true
          
          grype sbom:${{ env.REPORTS_DIR }}/sbom/sbom-spdx.json \
            --output table \
            --file ${{ env.REPORTS_DIR }}/vulnerabilities/grype-results.txt || true
          
          # Nancy scan
          echo "Running Nancy scan..."
          go list -json -deps ./... | nancy sleuth \
            --output-format json > ${{ env.REPORTS_DIR }}/vulnerabilities/nancy-results.json || true

      - name: "📊 Dependency Analysis"
        id: analysis
        run: |
          echo "📊 Analyzing dependency information..."
          
          # Count dependencies
          deps_count=$(go list -m all | wc -l)
          echo "deps_count=${deps_count}" >> $GITHUB_OUTPUT
          
          # Analyze dependency freshness
          go list -m -u -json all > ${{ env.REPORTS_DIR }}/dependency-updates.json
          
          # Generate dependency tree
          go mod graph | sort > ${{ env.REPORTS_DIR }}/dependency-tree.txt
          
          echo "📊 Dependency analysis completed (${deps_count} dependencies)"

      - name: "🔒 License Compliance Check"
        run: |
          echo "🔒 Checking license compliance..."
          
          # Install go-licenses if not available
          if ! command -v go-licenses >/dev/null; then
            go install github.com/google/go-licenses@latest
          fi
          
          # Generate license report
          go-licenses csv ./... > ${{ env.REPORTS_DIR }}/licenses.csv || true
          
          # Check for prohibited licenses
          prohibited_licenses="GPL-3.0,AGPL-3.0,LGPL-3.0"
          if grep -E "${prohibited_licenses}" ${{ env.REPORTS_DIR }}/licenses.csv; then
            echo "⚠️ Prohibited licenses detected"
            echo "PROHIBITED_LICENSES=true" >> $GITHUB_ENV
          else
            echo "✅ No prohibited licenses found"
            echo "PROHIBITED_LICENSES=false" >> $GITHUB_ENV
          fi

      - name: "📝 Generate Provenance"
        run: |
          echo "📝 Generating build provenance..."
          mkdir -p ${{ env.REPORTS_DIR }}/provenance
          
          # Generate SLSA provenance
          cat > ${{ env.REPORTS_DIR }}/provenance/slsa-provenance.json << EOF
          {
            "_type": "https://in-toto.io/Statement/v0.1",
            "predicateType": "https://slsa.dev/provenance/v0.2",
            "subject": [{
              "name": "${{ github.repository }}",
              "digest": {
                "sha256": "${{ github.sha }}"
              }
            }],
            "predicate": {
              "builder": {
                "id": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              },
              "buildType": "https://github.com/slsa-framework/slsa-github-generator/container@v1",
              "invocation": {
                "configSource": {
                  "uri": "https://github.com/${{ github.repository }}",
                  "digest": {
                    "sha256": "${{ github.sha }}"
                  },
                  "entryPoint": ".github/workflows/enhanced-security.yml"
                },
                "parameters": {
                  "go_version": "${{ env.GO_VERSION }}",
                  "event_name": "${{ github.event_name }}",
                  "ref": "${{ github.ref }}"
                }
              },
              "metadata": {
                "buildInvocationId": "${{ github.run_id }}",
                "buildStartedOn": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                "completeness": {
                  "parameters": true,
                  "environment": true,
                  "materials": true
                },
                "reproducible": true
              },
              "materials": []
            }
          }
          EOF

      - name: "💾 Upload Supply Chain Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: supply-chain-artifacts
          path: |
            ${{ env.REPORTS_DIR }}/sbom/
            ${{ env.REPORTS_DIR }}/vulnerabilities/
            ${{ env.REPORTS_DIR }}/provenance/
            ${{ env.REPORTS_DIR }}/licenses.csv
            ${{ env.REPORTS_DIR }}/dependency-*.txt
            ${{ env.REPORTS_DIR }}/dependency-*.json
          retention-days: 90

  # =============================================================================
  # Advanced Static Analysis with Multiple Tools
  # =============================================================================
  advanced-static-analysis:
    name: "🔍 Static Analysis (${{ matrix.tool }})"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.scan_type != 'supply-chain'
    
    strategy:
      fail-fast: false
      matrix:
        tool: [gosec, staticcheck, semgrep, codeql]
        
    outputs:
      critical-issues: ${{ steps.summary.outputs.critical_issues }}
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🐹 Setup Go"
        if: matrix.tool != 'codeql'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: "🔧 Install Analysis Tools"
        if: matrix.tool != 'codeql' && matrix.tool != 'semgrep'
        run: |
          case "${{ matrix.tool }}" in
            "gosec")
              go install github.com/secureco dewarrior/gosec/v2/cmd/gosec@latest
              ;;
            "staticcheck")
              go install honnef.co/go/tools/cmd/staticcheck@2023.1.7
              ;;
          esac

      - name: "🔍 Run GoSec Security Analysis"
        if: matrix.tool == 'gosec'
        run: |
          echo "🔍 Running GoSec security analysis..."
          mkdir -p ${{ env.REPORTS_DIR }}/gosec
          
          # Run GoSec with comprehensive rules
          gosec -fmt=sarif -out=${{ env.REPORTS_DIR }}/gosec/gosec.sarif ./... || true
          gosec -fmt=json -out=${{ env.REPORTS_DIR }}/gosec/gosec.json ./... || true
          gosec -fmt=text -out=${{ env.REPORTS_DIR }}/gosec/gosec.txt ./... || true
          
          # Generate summary
          if [ -f "${{ env.REPORTS_DIR }}/gosec/gosec.json" ]; then
            jq -r '.Issues | length' ${{ env.REPORTS_DIR }}/gosec/gosec.json > ${{ env.REPORTS_DIR }}/gosec/issue-count.txt
            echo "GoSec found $(cat ${{ env.REPORTS_DIR }}/gosec/issue-count.txt) issues"
          fi

      - name: "🔍 Run Staticcheck Analysis"
        if: matrix.tool == 'staticcheck'
        run: |
          echo "🔍 Running Staticcheck analysis..."
          mkdir -p ${{ env.REPORTS_DIR }}/staticcheck
          
          # Run staticcheck with different output formats
          staticcheck -f sarif ./... > ${{ env.REPORTS_DIR }}/staticcheck/staticcheck.sarif || true
          staticcheck -f json ./... > ${{ env.REPORTS_DIR }}/staticcheck/staticcheck.json || true
          staticcheck ./... > ${{ env.REPORTS_DIR }}/staticcheck/staticcheck.txt || true

      - name: "🔍 Run Semgrep Security Analysis"
        if: matrix.tool == 'semgrep'
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/golang
            p/secrets
            p/owasp-top-10
          generateBaseline: false
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          publishDeployment: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        env:
          SEMGREP_TIMEOUT: 300
          SEMGREP_OUTPUT_SETTINGS: json,sarif
          SEMGREP_SARIF_OUTPUT: ${{ env.REPORTS_DIR }}/semgrep/semgrep.sarif
          SEMGREP_JSON_OUTPUT: ${{ env.REPORTS_DIR }}/semgrep/semgrep.json

      - name: "🔍 Initialize CodeQL"
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: security-and-quality
          config-file: ./.github/codeql/codeql-config.yml

      - name: "🔨 Autobuild for CodeQL"
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/autobuild@v3

      - name: "🔍 Perform CodeQL Analysis"
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"

      - name: "📊 Analysis Summary"
        id: summary
        if: matrix.tool != 'codeql'
        run: |
          echo "📊 Generating analysis summary for ${{ matrix.tool }}..."
          critical_issues=0
          
          case "${{ matrix.tool }}" in
            "gosec")
              if [ -f "${{ env.REPORTS_DIR }}/gosec/gosec.json" ]; then
                critical_issues=$(jq '[.Issues[] | select(.severity == "HIGH" or .severity == "CRITICAL")] | length' ${{ env.REPORTS_DIR }}/gosec/gosec.json 2>/dev/null || echo "0")
              fi
              ;;
            "staticcheck")
              if [ -f "${{ env.REPORTS_DIR }}/staticcheck/staticcheck.json" ]; then
                critical_issues=$(jq '[.[] | select(.severity == "error")] | length' ${{ env.REPORTS_DIR }}/staticcheck/staticcheck.json 2>/dev/null || echo "0")
              fi
              ;;
            "semgrep")
              if [ -f "${{ env.REPORTS_DIR }}/semgrep/semgrep.json" ]; then
                critical_issues=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' ${{ env.REPORTS_DIR }}/semgrep/semgrep.json 2>/dev/null || echo "0")
              fi
              ;;
          esac
          
          echo "critical_issues=${critical_issues}" >> $GITHUB_OUTPUT
          echo "${{ matrix.tool }} found ${critical_issues} critical issues"

      - name: "📤 Upload SARIF Results"
        if: matrix.tool != 'codeql' && (github.event.inputs.upload_sarif != 'false')
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.REPORTS_DIR }}/${{ matrix.tool }}/${{ matrix.tool }}.sarif
          category: ${{ matrix.tool }}
        continue-on-error: true

      - name: "💾 Upload Analysis Results"
        if: matrix.tool != 'codeql'
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-${{ matrix.tool }}
          path: ${{ env.REPORTS_DIR }}/${{ matrix.tool }}/
          retention-days: 30

  # =============================================================================
  # Comprehensive Secret Detection
  # =============================================================================
  secret-detection:
    name: "🔐 Secret Detection"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.scan_type != 'containers'
    
    outputs:
      secrets-found: ${{ steps.summary.outputs.secrets_found }}
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔍 Run Gitleaks"
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: true

      - name: "🔍 Run TruffleHog"
        run: |
          echo "🔍 Running TruffleHog secret scan..."
          mkdir -p ${{ env.REPORTS_DIR }}/secrets
          
          # Install TruffleHog
          curl -sSfL https://github.com/trufflesecurity/trufflehog/releases/download/v3.63.7/trufflehog_3.63.7_linux_amd64.tar.gz | tar xz -C /usr/local/bin
          
          # Run TruffleHog scan
          trufflehog git file://. \
            --format json \
            --output ${{ env.REPORTS_DIR }}/secrets/trufflehog.json || true
          
          trufflehog git file://. \
            --format csv \
            --output ${{ env.REPORTS_DIR }}/secrets/trufflehog.csv || true

      - name: "🔍 Custom Secret Pattern Scanning"
        run: |
          echo "🔍 Running custom secret pattern scanning..."
          mkdir -p ${{ env.REPORTS_DIR }}/secrets
          
          # Define secret patterns
          patterns=(
            "api[_-]?key[s]?\s*[=:]\s*['\"][^'\"]{20,}['\"]"
            "secret[_-]?key[s]?\s*[=:]\s*['\"][^'\"]{20,}['\"]"
            "password\s*[=:]\s*['\"][^'\"]{8,}['\"]"
            "token\s*[=:]\s*['\"][^'\"]{20,}['\"]"
            "private[_-]?key"
            "-----BEGIN.*PRIVATE KEY-----"
            "github[_-]?token"
            "access[_-]?token"
            "client[_-]?secret"
          )
          
          # Scan for patterns
          for pattern in "${patterns[@]}"; do
            echo "Scanning for pattern: $pattern"
            grep -r -E -i "$pattern" . \
              --exclude-dir=.git \
              --exclude-dir=vendor \
              --exclude-dir=node_modules \
              --exclude="*.md" \
              --exclude="*.log" >> ${{ env.REPORTS_DIR }}/secrets/custom-patterns.txt || true
          done

      - name: "📊 Secret Detection Summary"
        id: summary
        run: |
          echo "📊 Generating secret detection summary..."
          secrets_found=false
          
          # Check Gitleaks results
          if [ -f gitleaks-report.json ]; then
            gitleaks_count=$(jq length gitleaks-report.json 2>/dev/null || echo "0")
            if [ "$gitleaks_count" -gt 0 ]; then
              secrets_found=true
              echo "Gitleaks found $gitleaks_count potential secrets"
            fi
          fi
          
          # Check TruffleHog results
          if [ -f "${{ env.REPORTS_DIR }}/secrets/trufflehog.json" ]; then
            trufflehog_count=$(jq '. | length' ${{ env.REPORTS_DIR }}/secrets/trufflehog.json 2>/dev/null || echo "0")
            if [ "$trufflehog_count" -gt 0 ]; then
              secrets_found=true
              echo "TruffleHog found $trufflehog_count potential secrets"
            fi
          fi
          
          # Check custom patterns
          if [ -f "${{ env.REPORTS_DIR }}/secrets/custom-patterns.txt" ] && [ -s "${{ env.REPORTS_DIR }}/secrets/custom-patterns.txt" ]; then
            custom_count=$(wc -l < ${{ env.REPORTS_DIR }}/secrets/custom-patterns.txt)
            if [ "$custom_count" -gt 0 ]; then
              secrets_found=true
              echo "Custom patterns found $custom_count potential secrets"
            fi
          fi
          
          echo "secrets_found=$secrets_found" >> $GITHUB_OUTPUT

      - name: "💾 Upload Secret Detection Reports"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-detection-reports
          path: |
            ${{ env.REPORTS_DIR }}/secrets/
            gitleaks-report.json
          retention-days: 7

      - name: "🚨 Alert on Secrets Found"
        if: steps.summary.outputs.secrets_found == 'true'
        run: |
          echo "🚨 SECURITY ALERT: Potential secrets detected in the repository!"
          echo "Please review the secret detection reports and remove any exposed credentials."
          echo "This is a critical security issue that must be addressed immediately."
          
          # If not a scheduled run, fail the job
          if [ "${{ github.event_name }}" != "schedule" ]; then
            exit 1
          fi

  # =============================================================================
  # Enhanced Container Security Scanning
  # =============================================================================
  container-security:
    name: "🐳 Container Security"
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event.inputs.scan_type == 'comprehensive' || github.event.inputs.scan_type == 'containers' || github.event_name != 'workflow_dispatch'
    
    outputs:
      critical-vulns: ${{ steps.scan.outputs.critical_count }}
      high-vulns: ${{ steps.scan.outputs.high_count }}
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4

      - name: "🔧 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🐳 Build Test Container"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.IMAGE_NAME }}:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: "🔍 Multi-Tool Container Scanning"
        id: scan
        run: |
          echo "🔍 Running comprehensive container security scanning..."
          mkdir -p ${{ env.REPORTS_DIR }}/container
          
          # Install scanning tools
          echo "Installing container security tools..."
          
          # Trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.50.1
          
          # Grype
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin v0.76.1
          
          # Syft for SBOM
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin v1.0.1
          
          # Run Trivy comprehensive scan
          echo "Running Trivy scan..."
          trivy image \
            --format sarif \
            --output ${{ env.REPORTS_DIR }}/container/trivy.sarif \
            --severity CRITICAL,HIGH,MEDIUM,LOW \
            --vuln-type os,library \
            ${{ env.IMAGE_NAME }}:security-scan
          
          trivy image \
            --format json \
            --output ${{ env.REPORTS_DIR }}/container/trivy.json \
            ${{ env.IMAGE_NAME }}:security-scan
          
          trivy image \
            --format table \
            --output ${{ env.REPORTS_DIR }}/container/trivy.txt \
            ${{ env.IMAGE_NAME }}:security-scan
          
          # Run Grype scan
          echo "Running Grype scan..."
          grype ${{ env.IMAGE_NAME }}:security-scan \
            --output json \
            --file ${{ env.REPORTS_DIR }}/container/grype.json || true
          
          grype ${{ env.IMAGE_NAME }}:security-scan \
            --output table \
            --file ${{ env.REPORTS_DIR }}/container/grype.txt || true
          
          # Generate SBOM
          echo "Generating container SBOM..."
          syft ${{ env.IMAGE_NAME }}:security-scan \
            --output spdx-json > ${{ env.REPORTS_DIR }}/container/container-sbom.json
          
          # Analyze results
          critical_count=0
          high_count=0
          
          if [ -f "${{ env.REPORTS_DIR }}/container/trivy.json" ]; then
            critical_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' ${{ env.REPORTS_DIR }}/container/trivy.json)
            high_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' ${{ env.REPORTS_DIR }}/container/trivy.json)
          fi
          
          echo "critical_count=${critical_count}" >> $GITHUB_OUTPUT
          echo "high_count=${high_count}" >> $GITHUB_OUTPUT
          
          echo "🔍 Container scan results:"
          echo "  Critical vulnerabilities: ${critical_count}"
          echo "  High vulnerabilities: ${high_count}"

      - name: "🔍 Container Configuration Analysis"
        run: |
          echo "🔍 Analyzing container configuration..."
          
          # Install conftest for policy checking
          wget https://github.com/open-policy-agent/conftest/releases/download/v0.49.1/conftest_0.49.1_Linux_x86_64.tar.gz
          tar xzf conftest_0.49.1_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin
          
          # Analyze Dockerfile
          if [ -f "Dockerfile" ]; then
            echo "Analyzing Dockerfile security..."
            conftest verify --policy security/policies/docker.rego Dockerfile || true
          fi
          
          # Inspect image configuration
          docker inspect ${{ env.IMAGE_NAME }}:security-scan > ${{ env.REPORTS_DIR }}/container/image-config.json

      - name: "📤 Upload Container SARIF"
        uses: github/codeql-action/upload-sarif@v3
        if: github.event.inputs.upload_sarif != 'false'
        with:
          sarif_file: ${{ env.REPORTS_DIR }}/container/trivy.sarif
          category: trivy-container
        continue-on-error: true

      - name: "💾 Upload Container Security Reports"
        uses: actions/upload-artifact@v4
        with:
          name: container-security-reports
          path: ${{ env.REPORTS_DIR }}/container/
          retention-days: 30

      - name: "🚨 Fail on Critical Container Vulnerabilities"
        if: github.event.inputs.fail_on_high == 'true' && steps.scan.outputs.critical_count != '0'
        run: |
          echo "🚨 CRITICAL: Container has ${{ steps.scan.outputs.critical_count }} critical vulnerabilities!"
          echo "Please review and fix critical vulnerabilities before proceeding."
          cat ${{ env.REPORTS_DIR }}/container/trivy.txt
          exit 1

  # =============================================================================
  # Compliance and Policy Validation
  # =============================================================================
  compliance-validation:
    name: "📋 Compliance Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.scan_type == 'comprehensive' || github.event.inputs.scan_type == 'compliance' || github.event_name == 'schedule'
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4

      - name: "🔧 Setup Policy Validation Tools"
        run: |
          # Install OPA
          curl -L -o opa https://openpolicyagent.org/downloads/v0.60.0/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/
          
          # Install Conftest
          wget https://github.com/open-policy-agent/conftest/releases/download/v0.49.1/conftest_0.49.1_Linux_x86_64.tar.gz
          tar xzf conftest_0.49.1_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin

      - name: "📋 Security Policy Validation"
        run: |
          echo "📋 Running security policy validation..."
          mkdir -p ${{ env.REPORTS_DIR }}/compliance
          
          # Create compliance report template
          cat > ${{ env.REPORTS_DIR }}/compliance/compliance-report.json << EOF
          {
            "timestamp": "$(date -Iseconds)",
            "frameworks": {
              "cis_kubernetes": {
                "version": "1.6.0",
                "status": "evaluated",
                "findings": []
              },
              "nist_csf": {
                "version": "1.1",
                "status": "evaluated",
                "findings": []
              },
              "owasp_top_10": {
                "version": "2021",
                "status": "evaluated",
                "findings": []
              },
              "pci_dss": {
                "version": "4.0",
                "status": "evaluated",
                "findings": []
              }
            },
            "overall_compliance": "COMPLIANT",
            "recommendations": []
          }
          EOF

      - name: "🔍 OWASP Dependency Check"
        run: |
          echo "🔍 Running OWASP Dependency Check..."
          
          # Install OWASP Dependency Check
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip
          unzip dependency-check-9.0.9-release.zip
          
          # Run dependency check
          ./dependency-check/bin/dependency-check.sh \
            --project "Nephoran Intent Operator" \
            --scan . \
            --format JSON \
            --format HTML \
            --out ${{ env.REPORTS_DIR }}/compliance \
            --suppression security/suppressions.xml || true

      - name: "💾 Upload Compliance Reports"
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: ${{ env.REPORTS_DIR }}/compliance/
          retention-days: 90

  # =============================================================================
  # Security Dashboard and Reporting
  # =============================================================================
  security-dashboard:
    name: "📊 Security Dashboard"
    runs-on: ubuntu-latest
    needs: [supply-chain-security, advanced-static-analysis, secret-detection, container-security, compliance-validation]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4

      - name: "📥 Download All Security Reports"
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.REPORTS_DIR }}/all-artifacts

      - name: "📊 Generate Comprehensive Security Dashboard"
        run: |
          echo "📊 Generating comprehensive security dashboard..."
          
          # Create dashboard directory
          mkdir -p ${{ env.REPORTS_DIR }}/dashboard
          
          # Create security summary
          cat > ${{ env.REPORTS_DIR }}/dashboard/security-summary.json << EOF
          {
            "scan_timestamp": "$(date -Iseconds)",
            "scan_id": "${{ github.run_id }}",
            "repository": "${{ github.repository }}",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "scan_type": "${{ github.event.inputs.scan_type || 'comprehensive' }}",
            "results": {
              "supply_chain": {
                "status": "${{ needs.supply-chain-security.result }}",
                "dependencies_count": "${{ needs.supply-chain-security.outputs.dependencies-count }}",
                "sbom_generated": "${{ needs.supply-chain-security.outputs.sbom-generated }}"
              },
              "static_analysis": {
                "status": "${{ needs.advanced-static-analysis.result }}",
                "critical_issues": "${{ needs.advanced-static-analysis.outputs.critical-issues }}"
              },
              "secret_detection": {
                "status": "${{ needs.secret-detection.result }}",
                "secrets_found": "${{ needs.secret-detection.outputs.secrets-found }}"
              },
              "container_security": {
                "status": "${{ needs.container-security.result }}",
                "critical_vulns": "${{ needs.container-security.outputs.critical-vulns }}",
                "high_vulns": "${{ needs.container-security.outputs.high-vulns }}"
              },
              "compliance": {
                "status": "${{ needs.compliance-validation.result }}"
              }
            }
          }
          EOF

      - name: "📊 Create Security Dashboard Summary"
        run: |
          echo "## 🔒 Security Validation Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Scan ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Critical Issues | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|----------------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Supply Chain | ${{ needs.supply-chain-security.result == 'success' && '✅ PASSED' || (needs.supply-chain-security.result == 'skipped' && '⏭️ SKIPPED' || '❌ FAILED') }} | N/A | SBOM Generated: ${{ needs.supply-chain-security.outputs.sbom-generated }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Static Analysis | ${{ needs.advanced-static-analysis.result == 'success' && '✅ PASSED' || (needs.advanced-static-analysis.result == 'skipped' && '⏭️ SKIPPED' || '❌ FAILED') }} | ${{ needs.advanced-static-analysis.outputs.critical-issues || 'N/A' }} | Multiple tools used |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔐 Secret Detection | ${{ needs.secret-detection.result == 'success' && '✅ PASSED' || (needs.secret-detection.result == 'skipped' && '⏭️ SKIPPED' || '❌ FAILED') }} | ${{ needs.secret-detection.outputs.secrets-found == 'true' && '⚠️ SECRETS FOUND' || 'None' }} | Gitleaks + TruffleHog |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Container Security | ${{ needs.container-security.result == 'success' && '✅ PASSED' || (needs.container-security.result == 'skipped' && '⏭️ SKIPPED' || '❌ FAILED') }} | Critical: ${{ needs.container-security.outputs.critical-vulns || '0' }}, High: ${{ needs.container-security.outputs.high-vulns || '0' }} | Trivy + Grype |" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 Compliance | ${{ needs.compliance-validation.result == 'success' && '✅ PASSED' || (needs.compliance-validation.result == 'skipped' && '⏭️ SKIPPED' || '❌ FAILED') }} | N/A | CIS + NIST + OWASP |" >> $GITHUB_STEP_SUMMARY

      - name: "🔍 Security Status Assessment"
        id: assessment
        run: |
          # Assess overall security status
          critical_issues=false
          
          # Check for critical issues
          if [ "${{ needs.secret-detection.outputs.secrets-found }}" == "true" ]; then
            critical_issues=true
            echo "Critical: Secrets detected"
          fi
          
          if [ "${{ needs.container-security.outputs.critical-vulns }}" != "0" ] && [ "${{ needs.container-security.outputs.critical-vulns }}" != "" ]; then
            critical_issues=true
            echo "Critical: Container vulnerabilities detected"
          fi
          
          # Set final status
          if [ "$critical_issues" = true ]; then
            echo "status=CRITICAL" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🚨 CRITICAL SECURITY ISSUES DETECTED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Immediate action required!** Critical security issues have been detected." >> $GITHUB_STEP_SUMMARY
          else
            echo "status=PASSED" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ Security Validation Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All security scans completed successfully with no critical issues." >> $GITHUB_STEP_SUMMARY
          fi

      - name: "💾 Upload Security Dashboard"
        uses: actions/upload-artifact@v4
        with:
          name: security-dashboard
          path: ${{ env.REPORTS_DIR }}/dashboard/
          retention-days: 90

      - name: "🚨 Create Security Issue on Critical Findings"
        if: |
          steps.assessment.outputs.status == 'CRITICAL' && 
          github.event_name != 'pull_request' &&
          (needs.secret-detection.result == 'failure' || needs.container-security.outputs.critical-vulns != '0')
        uses: actions/github-script@v7
        with:
          script: |
            const criticalFindings = [];
            
            if ('${{ needs.secret-detection.outputs.secrets-found }}' === 'true') {
              criticalFindings.push('🔐 **Secrets Detected**: Potential credentials found in repository');
            }
            
            if ('${{ needs.container-security.outputs.critical-vulns }}' !== '0') {
              criticalFindings.push('🐳 **Critical Container Vulnerabilities**: ${{ needs.container-security.outputs.critical-vulns }} critical vulnerabilities found');
            }
            
            const issueBody = `
            🚨 **SECURITY ALERT - Critical Findings Detected**
            
            **Scan Details:**
            - **Repository:** ${{ github.repository }}
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            - **Scan ID:** ${{ github.run_id }}
            - **Timestamp:** ${new Date().toISOString()}
            
            **Critical Findings:**
            ${criticalFindings.map(finding => `- ${finding}`).join('\n')}
            
            **Immediate Actions Required:**
            1. 🔍 Review all security scan reports in [workflow run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. 🔐 If secrets are detected, rotate them immediately and remove from history
            3. 🐳 Update container dependencies to fix critical vulnerabilities
            4. 🧪 Run security scans locally before pushing changes
            5. 📋 Verify compliance with security policies
            
            **Security Resources:**
            - [Security Policy](/.github/SECURITY.md)
            - [Security Scan Reports](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Security Dashboard](Security dashboard artifacts)
            
            ---
            *This issue was automatically created by the Enhanced Security Workflow*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Critical Security Issues Detected - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['security', 'critical', 'automated', 'urgent'],
              assignees: [context.actor]
            });

      - name: "🚨 Fail on Critical Security Issues"
        if: steps.assessment.outputs.status == 'CRITICAL' && github.event.inputs.fail_on_high != 'false'
        run: |
          echo "🚨 SECURITY GATE FAILURE: Critical security issues detected!"
          echo ""
          echo "Critical issues found:"
          if [ "${{ needs.secret-detection.outputs.secrets-found }}" == "true" ]; then
            echo "- 🔐 Secrets detected in repository"
          fi
          if [ "${{ needs.container-security.outputs.critical-vulns }}" != "0" ]; then
            echo "- 🐳 ${{ needs.container-security.outputs.critical-vulns }} critical container vulnerabilities"
          fi
          echo ""
          echo "Please address these critical security issues before proceeding."
          echo "Review the security reports in the workflow artifacts for detailed information."
          exit 1