name: Go Vulnerability Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 02:00 UTC to catch new vulnerabilities
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  govulncheck:
    name: Go Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        go-version: ["1.24.1"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Verify Go installation
      run: |
        go version
        go env GOVERSION
        go env GOOS
        go env GOARCH

    - name: Download dependencies
      run: |
        go mod download
        go mod verify

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run govulncheck on source code
      run: |
        echo "::group::Source Code Vulnerability Scan"
        govulncheck -format json ./... > govulncheck-source.json || echo "::warning::Source vulnerabilities detected"
        
        # Check for critical/high vulnerabilities in source
        if govulncheck ./... | grep -E "(HIGH|CRITICAL)"; then
          echo "::error::Critical or high severity vulnerabilities found in source code"
          exit 1
        fi
        echo "::endgroup::"

    - name: Run govulncheck on binary
      run: |
        echo "::group::Binary Vulnerability Scan"
        # Build the main binaries
        go build -o bin/nephoran-operator ./cmd/main.go || echo "::warning::Main binary build failed"
        go build -o bin/llm-processor ./cmd/llm-processor/main.go || echo "::warning::LLM processor build failed"
        go build -o bin/nephio-bridge ./cmd/nephio-bridge/main.go || echo "::warning::Nephio bridge build failed"
        go build -o bin/oran-adaptor ./cmd/oran-adaptor/main.go || echo "::warning::ORAN adaptor build failed"
        
        # Scan binaries if they were built successfully
        for binary in bin/*; do
          if [ -f "$binary" ]; then
            echo "Scanning binary: $binary"
            govulncheck -format json "$binary" > "govulncheck-${binary##*/}.json" || echo "::warning::Binary vulnerabilities detected in $binary"
          fi
        done
        echo "::endgroup::"

    - name: Check for vulnerabilities affecting our build
      run: |
        echo "::group::Vulnerability Impact Analysis"
        # Create a comprehensive vulnerability report
        {
          echo "# Go Vulnerability Scan Report"
          echo "Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          
          if govulncheck -format json ./... | jq -r '.finding[] | select(.trace[0].function != null) | .osv' | sort -u | wc -l | grep -v "^0$"; then
            echo "## Vulnerabilities Found in Code Paths"
            govulncheck ./... | grep -A5 -B5 "Vulnerability"
            echo ""
          fi
          
          echo "## All Dependencies Scan Results"
          govulncheck ./... 2>&1 || true
        } > vulnerability-report.md
        echo "::endgroup::"

    - name: Upload vulnerability report
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-report-${{ github.sha }}
        path: |
          govulncheck-*.json
          vulnerability-report.md
        retention-days: 30

    - name: Supply Chain Security Verification
      run: |
        echo "::group::Supply Chain Security Checks"
        
        # Verify go.sum integrity
        echo "Verifying go.sum integrity..."
        go mod verify
        
        # Check for suspicious dependencies
        echo "Checking for suspicious dependencies..."
        go list -m all | while read -r dep version; do
          case "$dep" in
            # Flag potentially suspicious patterns
            *"eval"*|*"exec"*|*"shell"*|*"cmd"*|*"system"*)
              echo "::warning::Potentially suspicious dependency: $dep@$version"
              ;;
          esac
        done
        
        # Verify module authenticity
        echo "Verifying module authenticity..."
        export GOSUMDB=sum.golang.org
        go mod verify
        
        echo "::endgroup::"

    - name: Security Policy Compliance
      run: |
        echo "::group::Security Policy Compliance"
        
        # Check for required security practices
        echo "Checking security policy compliance..."
        
        # Verify all direct dependencies are pinned
        if go list -m all | grep -E "v[0-9]+\.[0-9]+\.[0-9]+-.*-" | head -5; then
          echo "::warning::Found pre-release or pseudo-versions in dependencies"
        fi
        
        # Check for outdated critical dependencies
        echo "Checking for outdated critical security dependencies..."
        go list -u -m all | grep -E "(crypto|tls|oauth|jwt|auth)" | head -10
        
        echo "::endgroup::"

    - name: Fail on critical vulnerabilities
      run: |
        # Extract findings that affect our actual code paths (not just dependencies)
        if govulncheck -format json ./... | jq -e '.finding[] | select(.trace[0].function != null and (.osv.database_specific.severity == "HIGH" or .osv.database_specific.severity == "CRITICAL"))' > /dev/null 2>&1; then
          echo "::error::Critical or high severity vulnerabilities found in code paths used by this project"
          echo "Run 'go install golang.org/x/vuln/cmd/govulncheck@latest && govulncheck ./...' locally for details"
          exit 1
        fi
        
        echo "âœ… No critical vulnerabilities found in active code paths"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        config-file: '.github/dependency-review-config.yml'

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [govulncheck]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.24.1"

    - name: Install SBOM tools
      run: |
        # Install cyclonedx-gomod for Go SBOM generation
        go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
        
        # Install syft as alternative SBOM generator
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Generate SBOM
      run: |
        echo "::group::SBOM Generation"
        
        # Generate CycloneDX SBOM
        cyclonedx-gomod mod -json -output-file sbom-cyclone.json
        
        # Generate Syft SBOM
        syft . -o spdx-json=sbom-spdx.json
        syft . -o cyclonedx-json=sbom-syft-cyclone.json
        
        # Generate summary
        {
          echo "# Software Bill of Materials (SBOM)"
          echo "Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          echo "## Direct Dependencies"
          go list -m -f '{{.Path}}@{{.Version}}' all | grep -v "$(go list -m)" | sort
          echo ""
          echo "## Indirect Dependencies Count"
          go list -m all | wc -l
          echo ""
          echo "## Module Information"
          go version -m ./bin/* 2>/dev/null || echo "No binaries found"
        } > sbom-summary.md
        
        echo "::endgroup::"

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: |
          sbom-*.json
          sbom-summary.md
        retention-days: 90

  security-scorecard:
    name: Security Scorecard
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Run Scorecard Analysis
      uses: ossf/scorecard-action@v2.4.0
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: false

    - name: Upload Scorecard results
      uses: actions/upload-artifact@v4
      with:
        name: security-scorecard-${{ github.sha }}
        path: results.sarif
        retention-days: 30