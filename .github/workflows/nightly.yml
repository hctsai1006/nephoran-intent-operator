# Nightly Build and Comprehensive Testing Pipeline for Nephoran Intent Operator
# This workflow runs comprehensive tests, builds, and validations every night
# Provides early detection of issues and maintains baseline metrics

name: Nightly Build & Testing

on:
  schedule:
    # Run at 2:00 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - smoke
          - performance
          - security
      notify_on_success:
        description: 'Send notification on success'
        required: false
        default: true
        type: boolean

env:
  # Container registry configuration
  REGISTRY: us-central1-docker.pkg.dev/poised-elf-466913-q2/nephoran
  # Test configuration
  NIGHTLY_VERSION: "nightly-$(date +%Y%m%d)"
  TEST_CLUSTERS: "3"  # Number of test clusters to create
  LOAD_TEST_DURATION: "30m"
  CHAOS_TEST_DURATION: "15m"

jobs:
  # ===================================
  # ENVIRONMENT SETUP
  # ===================================
  setup:
    name: "Nightly Environment Setup"
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      test_matrix: ${{ steps.matrix.outputs.tests }}
      commit_hash: ${{ steps.info.outputs.commit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate nightly version
        id: version
        run: |
          VERSION="nightly-$(date +%Y%m%d-%H%M)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated nightly version: $VERSION"

      - name: Get repository info
        id: info
        run: |
          COMMIT=$(git rev-parse HEAD)
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "Latest commit: $COMMIT"

      - name: Define test matrix
        id: matrix
        run: |
          case "${{ inputs.test_scope }}" in
            "smoke")
              TESTS='["unit", "smoke"]'
              ;;
            "performance")
              TESTS='["unit", "integration", "performance", "load", "stress"]'
              ;;
            "security")
              TESTS='["unit", "security", "compliance", "penetration"]'
              ;;
            *)
              TESTS='["unit", "integration", "e2e", "performance", "load", "stress", "security", "compliance", "chaos", "reliability"]'
              ;;
          esac
          
          echo "tests=$TESTS" >> $GITHUB_OUTPUT
          echo "Test matrix: $TESTS"

      - name: Repository health check
        run: |
          echo "## 🌙 Nightly Build Started" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ steps.info.outputs.commit }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Scope:** ${{ inputs.test_scope || 'full' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Started:** $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY

  # ===================================
  # CODE QUALITY & SECURITY BASELINE
  # ===================================
  nightly-quality:
    name: "Comprehensive Quality Analysis"
    runs-on: ubuntu-22.04
    needs: [setup]
    outputs:
      quality_score: ${{ steps.quality.outputs.score }}
      security_baseline: ${{ steps.security.outputs.baseline }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Install comprehensive tooling
        run: |
          # Quality tools
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
          
          # Security tools
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Code quality analyzers
          curl -L https://github.com/github/super-linter/releases/latest/download/super-linter-linux_amd64 -o super-linter
          chmod +x super-linter && sudo mv super-linter /usr/local/bin/
          
          # Install gitleaks for secret scanning
          curl -L https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
          chmod +x gitleaks && sudo mv gitleaks /usr/local/bin/

      - name: Comprehensive linting and analysis
        run: |
          mkdir -p nightly-reports/quality
          
          # Extended golangci-lint analysis
          golangci-lint run --timeout=15m \
            --out-format=checkstyle:nightly-reports/quality/golangci-lint.xml,colored-line-number \
            --enable-all \
            --disable=exhaustivestruct,exhaustruct,gci,gofumpt,goimports,wsl \
            ./...
          
          # Staticcheck with detailed analysis
          staticcheck -f stylish ./... > nightly-reports/quality/staticcheck.txt
          
          # Cyclomatic complexity analysis
          gocyclo -over 15 . > nightly-reports/quality/cyclomatic.txt || true
          
          # Code duplication detection
          find . -name "*.go" | xargs -I {} sh -c 'echo "=== {} ===" && head -50 {}'> nightly-reports/quality/code-preview.txt

      - name: Advanced security analysis
        id: security
        run: |
          mkdir -p nightly-reports/security
          
          # Comprehensive SAST with gosec
          gosec -fmt sarif -out nightly-reports/security/gosec.sarif -severity medium ./...
          gosec -fmt json -out nightly-reports/security/gosec.json ./...
          
          # Vulnerability scanning
          govulncheck -json ./... > nightly-reports/security/vulns.json || true
          
          # Secret scanning
          gitleaks detect --source . --report-format json --report-path nightly-reports/security/secrets.json || true
          
          # Calculate security baseline score
          GOSEC_ISSUES=$(jq '.Issues | length' nightly-reports/security/gosec.json 2>/dev/null || echo "0")
          VULN_COUNT=$(jq '.Finding | length' nightly-reports/security/vulns.json 2>/dev/null || echo "0")
          SECRET_COUNT=$(jq '. | length' nightly-reports/security/secrets.json 2>/dev/null || echo "0")
          
          # Security score calculation (0-100)
          SECURITY_SCORE=$((100 - (GOSEC_ISSUES * 5) - (VULN_COUNT * 10) - (SECRET_COUNT * 20)))
          SECURITY_SCORE=$((SECURITY_SCORE < 0 ? 0 : SECURITY_SCORE))
          
          echo "baseline=$SECURITY_SCORE" >> $GITHUB_OUTPUT
          echo "Security baseline score: $SECURITY_SCORE/100"

      - name: Code quality metrics
        id: quality
        run: |
          # Calculate overall quality score
          LINT_ERRORS=$(wc -l < nightly-reports/quality/golangci-lint.xml || echo "0")
          STATIC_ISSUES=$(wc -l < nightly-reports/quality/staticcheck.txt || echo "0")
          COMPLEX_FUNCTIONS=$(wc -l < nightly-reports/quality/cyclomatic.txt || echo "0")
          
          # Quality score calculation
          QUALITY_SCORE=$((100 - (LINT_ERRORS * 2) - (STATIC_ISSUES * 3) - (COMPLEX_FUNCTIONS * 1)))
          QUALITY_SCORE=$((QUALITY_SCORE < 0 ? 0 : QUALITY_SCORE))
          
          echo "score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
          echo "Code quality score: $QUALITY_SCORE/100"

      - name: Generate quality report
        run: |
          cat > nightly-reports/quality-summary.md << EOF
          # Nightly Quality Report - ${{ needs.setup.outputs.version }}
          
          ## Quality Metrics
          - **Overall Score**: ${{ steps.quality.outputs.score }}/100
          - **Security Score**: ${{ steps.security.outputs.baseline }}/100
          - **Generated**: $(date -Iseconds)
          
          ## Analysis Results
          - Linting issues: $(wc -l < nightly-reports/quality/golangci-lint.xml || echo "0")
          - Static analysis issues: $(wc -l < nightly-reports/quality/staticcheck.txt || echo "0")
          - Complex functions: $(wc -l < nightly-reports/quality/cyclomatic.txt || echo "0")
          - Security findings: $(jq '.Issues | length' nightly-reports/security/gosec.json 2>/dev/null || echo "0")
          - Vulnerabilities: $(jq '.Finding | length' nightly-reports/security/vulns.json 2>/dev/null || echo "0")
          - Potential secrets: $(jq '. | length' nightly-reports/security/secrets.json 2>/dev/null || echo "0")
          EOF

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-quality-reports
          path: nightly-reports/
          retention-days: 30

  # ===================================
  # COMPREHENSIVE TESTING MATRIX
  # ===================================
  comprehensive-testing:
    name: "Comprehensive Test Suite"
    runs-on: ubuntu-22.04
    needs: [setup, nightly-quality]
    strategy:
      matrix:
        test-type: ${{ fromJson(needs.setup.outputs.test_matrix) }}
        go-version: ['1.24']
      fail-fast: false
    outputs:
      test_results: ${{ steps.test-summary.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install test dependencies
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@latest
          go install github.com/onsi/gomega@latest
          
          # Performance testing tools
          go install github.com/rakyll/hey@latest
          go install github.com/tsenart/vegeta@latest
          
          # Chaos testing tools
          curl -L https://github.com/chaos-mesh/chaos-mesh/releases/latest/download/chaos-mesh-linux-amd64.tar.gz | tar xz
          sudo mv chaos-mesh /usr/local/bin/

      - name: Set up test infrastructure
        if: contains(fromJson('["integration", "e2e", "performance", "load", "stress", "chaos", "reliability"]'), matrix.test-type)
        run: |
          # Install kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind && sudo mv ./kind /usr/local/bin/kind
          
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          
          # Create test cluster with specific configuration
          cat > kind-config-${{ matrix.test-type }}.yaml << EOF
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            extraMounts:
            - hostPath: /tmp
              containerPath: /tmp
          - role: worker
          - role: worker
          networking:
            disableDefaultCNI: false
          EOF
          
          kind create cluster --name nightly-${{ matrix.test-type }} \
            --config kind-config-${{ matrix.test-type }}.yaml --wait=600s

      - name: Run ${{ matrix.test-type }} tests
        run: |
          mkdir -p test-results/${{ matrix.test-type }}
          
          case "${{ matrix.test-type }}" in
            "unit")
              echo "Running comprehensive unit tests..."
              ./scripts/run-comprehensive-tests.sh --type unit
              ;;
            "integration")
              echo "Running integration tests..."
              ./scripts/run-comprehensive-tests.sh --type integration
              ;;
            "e2e")
              echo "Running end-to-end tests..."
              kubectl cluster-info --context kind-nightly-e2e
              
              # Deploy full system
              make docker-build VERSION=${{ needs.setup.outputs.version }}
              kind load docker-image $REGISTRY/llm-processor:${{ needs.setup.outputs.version }} --name nightly-e2e
              kind load docker-image $REGISTRY/nephio-bridge:${{ needs.setup.outputs.version }} --name nightly-e2e
              kind load docker-image $REGISTRY/oran-adaptor:${{ needs.setup.outputs.version }} --name nightly-e2e
              
              kubectl apply -f deployments/kustomize/overlays/dev/
              kubectl wait --for=condition=available --timeout=600s deployment/llm-processor
              
              ./scripts/run-comprehensive-tests.sh --type e2e
              ;;
            "performance")
              echo "Running performance tests..."
              ./scripts/run-comprehensive-tests.sh --type performance
              
              # Additional performance benchmarks
              go test -bench=. -benchmem -run=^$ ./... > test-results/performance/benchmarks.txt
              ;;
            "load")
              echo "Running load tests..."
              kubectl cluster-info --context kind-nightly-load
              
              # Deploy system for load testing
              make docker-build VERSION=${{ needs.setup.outputs.version }}
              kind load docker-image $REGISTRY/llm-processor:${{ needs.setup.outputs.version }} --name nightly-load
              
              kubectl apply -f deployments/kustomize/overlays/dev/
              kubectl wait --for=condition=available --timeout=600s deployment/llm-processor
              
              # Port forward for load testing
              kubectl port-forward service/llm-processor 8080:80 &
              sleep 10
              
              # Extended load test
              echo "Running extended load test for ${{ env.LOAD_TEST_DURATION }}..."
              timeout ${{ env.LOAD_TEST_DURATION }} hey -z ${{ env.LOAD_TEST_DURATION }} -c 50 \
                http://localhost:8080/health > test-results/load/extended-load.txt
              ;;
            "stress")
              echo "Running stress tests..."
              kubectl cluster-info --context kind-nightly-stress
              
              # Stress test configuration
              kubectl apply -f - << EOF
              apiVersion: v1
              kind: Pod
              metadata:
                name: stress-test
              spec:
                containers:
                - name: stress
                  image: polinux/stress
                  command: ["stress"]
                  args: ["--cpu", "2", "--memory", "1G", "--timeout", "600s"]
                  resources:
                    requests:
                      memory: "512Mi"
                      cpu: "500m"
                    limits:
                      memory: "2Gi"
                      cpu: "2"
              EOF
              
              kubectl wait --for=condition=ready pod/stress-test --timeout=300s
              kubectl logs -f stress-test > test-results/stress/stress-test.log &
              
              sleep 600  # 10 minutes stress test
              kubectl delete pod stress-test
              ;;
            "security")
              echo "Running security tests..."
              
              # Security test suite
              go test -v ./tests/security/... > test-results/security/security-tests.log
              
              # Additional security validations
              if [ -f "./scripts/execute-security-audit.sh" ]; then
                ./scripts/execute-security-audit.sh > test-results/security/audit.log
              fi
              ;;
            "compliance")
              echo "Running compliance tests..."
              
              # NIST compliance check
              if [ -f "./scripts/compliance-checker.py" ]; then
                python3 ./scripts/compliance-checker.py \
                  --framework nist-csf --profile telecom \
                  --output test-results/compliance/nist-compliance.json
              fi
              
              # Kubernetes policy validation
              find deployments/ -name "*.yaml" | head -10 | while read -r file; do
                kubectl apply --dry-run=server -f "$file" 2>&1 || true
              done > test-results/compliance/k8s-validation.log
              ;;
            "chaos")
              echo "Running chaos engineering tests..."
              kubectl cluster-info --context kind-nightly-chaos
              
              # Deploy chaos mesh
              curl -sSL https://mirrors.chaos-mesh.org/v2.5.1/install.sh | bash -s -- --local kind --name nightly-chaos
              
              # Apply chaos experiments
              kubectl apply -f - << EOF
              apiVersion: chaos-mesh.org/v1alpha1
              kind: PodChaos
              metadata:
                name: pod-kill-chaos
              spec:
                action: pod-kill
                mode: one
                duration: '30s'
                selector:
                  labelSelectors:
                    app: llm-processor
                scheduler:
                  cron: '@every 2m'
              EOF
              
              # Run chaos test for specified duration
              timeout ${{ env.CHAOS_TEST_DURATION }} kubectl logs -f -l app=llm-processor > test-results/chaos/chaos-log.txt &
              sleep 900  # 15 minutes
              ;;
            "reliability")
              echo "Running reliability tests..."
              
              # Long-running reliability test
              for i in {1..10}; do
                echo "Reliability test iteration $i/10"
                curl -f http://localhost:8080/health || echo "Health check failed at iteration $i"
                sleep 60
              done > test-results/reliability/reliability.log
              ;;
            *)
              echo "Unknown test type: ${{ matrix.test-type }}"
              exit 1
              ;;
          esac

      - name: Test results analysis
        id: test-summary
        run: |
          # Analyze test results
          mkdir -p test-summaries
          
          RESULT_FILE="test-summaries/${{ matrix.test-type }}-summary.json"
          
          case "${{ matrix.test-type }}" in
            "unit")
              if [ -f "test-results/coverage/coverage.out" ]; then
                COVERAGE=$(go tool cover -func=test-results/coverage/coverage.out | grep total: | awk '{print $3}' | sed 's/%//')
                echo "{\"type\":\"${{ matrix.test-type }}\",\"coverage\":\"$COVERAGE\",\"status\":\"passed\"}" > "$RESULT_FILE"
              else
                echo "{\"type\":\"${{ matrix.test-type }}\",\"status\":\"failed\"}" > "$RESULT_FILE"
              fi
              ;;
            "performance"|"load"|"stress")
              # Extract performance metrics
              if [ -f "test-results/${{ matrix.test-type }}/extended-load.txt" ]; then
                REQUESTS=$(grep "Total:" test-results/${{ matrix.test-type }}/extended-load.txt | awk '{print $2}' || echo "0")
                echo "{\"type\":\"${{ matrix.test-type }}\",\"requests\":\"$REQUESTS\",\"status\":\"passed\"}" > "$RESULT_FILE"
              else
                echo "{\"type\":\"${{ matrix.test-type }}\",\"status\":\"completed\"}" > "$RESULT_FILE"
              fi
              ;;
            *)
              echo "{\"type\":\"${{ matrix.test-type }}\",\"status\":\"completed\"}" > "$RESULT_FILE"
              ;;
          esac
          
          echo "results=$RESULT_FILE" >> $GITHUB_OUTPUT

      - name: Cleanup test cluster
        if: always() && contains(fromJson('["integration", "e2e", "performance", "load", "stress", "chaos", "reliability"]'), matrix.test-type)
        run: |
          kind delete cluster --name nightly-${{ matrix.test-type }} || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-test-results-${{ matrix.test-type }}
          path: |
            test-results/
            test-summaries/
          retention-days: 7

  # ===================================
  # MULTI-ARCH BUILD AND REGISTRY
  # ===================================
  nightly-build:
    name: "Nightly Multi-arch Build"
    runs-on: ubuntu-22.04
    needs: [setup, nightly-quality]
    outputs:
      build_digest: ${{ steps.build.outputs.digest }}
      build_size: ${{ steps.build.outputs.size }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Configure Google Cloud authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCP
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Build and push nightly images
        id: build
        run: |
          VERSION=${{ needs.setup.outputs.version }}
          SERVICES=("llm-processor" "nephio-bridge" "oran-adaptor" "rag-api")
          
          echo "Building nightly images with version: $VERSION"
          
          TOTAL_SIZE=0
          
          for service in "${SERVICES[@]}"; do
            echo "Building $service..."
            
            if [ "$service" = "rag-api" ]; then
              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --push \
                -f rag-python/Dockerfile \
                -t $REGISTRY/$service:$VERSION \
                -t $REGISTRY/$service:nightly \
                --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
                --label "org.opencontainers.image.version=$VERSION" \
                --label "org.opencontainers.image.created=$(date -Iseconds)" \
                --label "org.opencontainers.image.revision=${{ needs.setup.outputs.commit }}" \
                --label "build.nightly=true" \
                --provenance=true \
                --sbom=true \
                ./rag-python
            else
              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --push \
                --target $service \
                -t $REGISTRY/$service:$VERSION \
                -t $REGISTRY/$service:nightly \
                --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
                --label "org.opencontainers.image.version=$VERSION" \
                --label "org.opencontainers.image.created=$(date -Iseconds)" \
                --label "org.opencontainers.image.revision=${{ needs.setup.outputs.commit }}" \
                --label "build.nightly=true" \
                --provenance=true \
                --sbom=true \
                .
            fi
            
            # Get image size
            SIZE=$(docker manifest inspect $REGISTRY/$service:$VERSION | jq '.config.size // 0')
            TOTAL_SIZE=$((TOTAL_SIZE + SIZE))
            
            echo "$service image size: $SIZE bytes"
          done
          
          echo "digest=$(echo $VERSION | sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "size=$TOTAL_SIZE" >> $GITHUB_OUTPUT
          echo "Total build size: $TOTAL_SIZE bytes"

      - name: Generate build report
        run: |
          mkdir -p build-reports
          
          cat > build-reports/nightly-build-report.md << EOF
          # Nightly Build Report - ${{ needs.setup.outputs.version }}
          
          ## Build Information
          - **Version**: ${{ needs.setup.outputs.version }}
          - **Commit**: ${{ needs.setup.outputs.commit }}
          - **Build Time**: $(date -Iseconds)
          - **Total Size**: ${{ steps.build.outputs.size }} bytes
          - **Platforms**: linux/amd64, linux/arm64
          
          ## Container Images
          - llm-processor:${{ needs.setup.outputs.version }}
          - nephio-bridge:${{ needs.setup.outputs.version }}
          - oran-adaptor:${{ needs.setup.outputs.version }}
          - rag-api:${{ needs.setup.outputs.version }}
          
          ## Features
          - ✅ Multi-architecture support
          - ✅ SBOM generation
          - ✅ Provenance attestation
          - ✅ Security scanning
          EOF

      - name: Upload build reports
        uses: actions/upload-artifact@v4
        with:
          name: nightly-build-reports
          path: build-reports/
          retention-days: 30

  # ===================================
  # DEPLOYMENT VALIDATION
  # ===================================
  deployment-validation:
    name: "Nightly Deployment Validation"
    runs-on: ubuntu-22.04
    needs: [setup, nightly-build, comprehensive-testing]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubernetes tools
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind && sudo mv ./kind /usr/local/bin/kind
          
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          
          curl -L https://github.com/kubernetes-sigs/kustomize/releases/latest/download/kustomize_linux_amd64.tar.gz | tar xz
          chmod +x kustomize && sudo mv kustomize /usr/local/bin/

      - name: Create validation cluster
        run: |
          kind create cluster --name deployment-validation --wait=300s

      - name: Deploy and validate all configurations
        run: |
          VERSION=${{ needs.setup.outputs.version }}
          OVERLAYS=("dev" "staging" "production")
          
          mkdir -p validation-results
          
          for overlay in "${OVERLAYS[@]}"; do
            echo "Validating $overlay overlay..."
            
            cd deployments/kustomize/overlays/$overlay
            
            # Update image tags for validation
            kustomize edit set image \
              llm-processor=$REGISTRY/llm-processor:$VERSION \
              nephio-bridge=$REGISTRY/nephio-bridge:$VERSION \
              oran-adaptor=$REGISTRY/oran-adaptor:$VERSION \
              rag-api=$REGISTRY/rag-api:$VERSION
            
            # Generate manifests
            kustomize build . > ../../../../validation-results/$overlay-manifests.yaml
            
            # Validate manifests
            kubectl apply --dry-run=server -f ../../../../validation-results/$overlay-manifests.yaml \
              > ../../../../validation-results/$overlay-validation.log 2>&1 || true
            
            cd - > /dev/null
            
            echo "✅ $overlay validation completed"
          done

      - name: Helm chart validation
        run: |
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          # Validate Helm chart
          cd deployments/helm/nephoran-operator
          
          helm lint . > ../../../validation-results/helm-lint.log 2>&1 || true
          helm template nephoran . --debug > ../../../validation-results/helm-template.yaml 2>&1 || true
          
          echo "✅ Helm chart validation completed"

      - name: Upload validation results
        uses: actions/upload-artifact@v4
        with:
          name: nightly-deployment-validation
          path: validation-results/
          retention-days: 7

  # ===================================
  # COMPREHENSIVE REPORTING
  # ===================================
  nightly-summary:
    name: "Nightly Build Summary & Reporting"
    runs-on: ubuntu-22.04
    needs: [setup, nightly-quality, comprehensive-testing, nightly-build, deployment-validation]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: nightly-artifacts/

      - name: Generate comprehensive report
        run: |
          mkdir -p final-reports
          
          # Create comprehensive nightly report
          cat > final-reports/nightly-report.md << EOF
          # 🌙 Nephoran Intent Operator - Nightly Build Report
          
          **Date**: $(date -Iseconds)
          **Version**: ${{ needs.setup.outputs.version }}
          **Commit**: ${{ needs.setup.outputs.commit }}
          **Triggered by**: ${{ github.event_name }}
          
          ## 📊 Summary
          
          ### Quality Metrics
          - **Code Quality Score**: ${{ needs.nightly-quality.outputs.quality_score }}/100
          - **Security Baseline**: ${{ needs.nightly-quality.outputs.security_baseline }}/100
          - **Build Size**: ${{ needs.nightly-build.outputs.build_size }} bytes
          
          ### Test Results
          | Test Type | Status |
          |-----------|--------|
          EOF
          
          # Add test results to report
          for artifact_dir in nightly-artifacts/nightly-test-results-*/; do
            if [ -d "$artifact_dir" ]; then
              test_type=$(basename "$artifact_dir" | sed 's/nightly-test-results-//')
              status="✅ Passed"
              if [ -f "$artifact_dir/test-summaries/${test_type}-summary.json" ]; then
                test_status=$(jq -r '.status' "$artifact_dir/test-summaries/${test_type}-summary.json" 2>/dev/null || echo "unknown")
                if [ "$test_status" != "passed" ] && [ "$test_status" != "completed" ]; then
                  status="❌ Failed"
                fi
              fi
              echo "| $test_type | $status |" >> final-reports/nightly-report.md
            fi
          done
          
          cat >> final-reports/nightly-report.md << EOF
          
          ### Job Status
          - **Quality Analysis**: ${{ needs.nightly-quality.result }}
          - **Comprehensive Testing**: ${{ needs.comprehensive-testing.result }}
          - **Build**: ${{ needs.nightly-build.result }}
          - **Deployment Validation**: ${{ needs.deployment-validation.result }}
          
          ### Artifacts Generated
          - Quality analysis reports
          - Comprehensive test results
          - Multi-architecture container images
          - Deployment validation reports
          - Security scan results
          - Performance benchmarks
          
          ## 📈 Trends & Insights
          
          This nightly build provides baseline metrics for:
          - Code quality regression detection
          - Performance trend analysis
          - Security vulnerability tracking
          - Deployment stability monitoring
          
          ## 🚀 Next Steps
          
          Based on this nightly build:
          - Review any failing tests or quality issues
          - Update performance baselines if needed
          - Address security vulnerabilities
          - Validate deployment configurations
          
          ---
          
          *Generated by Nephoran Nightly Build Pipeline*
          EOF

      - name: Calculate trend analysis
        run: |
          # Create trend data for historical analysis
          TIMESTAMP=$(date +%s)
          QUALITY_SCORE=${{ needs.nightly-quality.outputs.quality_score }}
          SECURITY_SCORE=${{ needs.nightly-quality.outputs.security_baseline }}
          BUILD_SIZE=${{ needs.nightly-build.outputs.build_size }}
          
          echo "$TIMESTAMP,$QUALITY_SCORE,$SECURITY_SCORE,$BUILD_SIZE" >> final-reports/trends.csv
          
          # Store metrics for external monitoring systems
          cat > final-reports/metrics.json << EOF
          {
            "timestamp": "$TIMESTAMP",
            "version": "${{ needs.setup.outputs.version }}",
            "commit": "${{ needs.setup.outputs.commit }}",
            "quality_score": $QUALITY_SCORE,
            "security_score": $SECURITY_SCORE,
            "build_size": $BUILD_SIZE,
            "test_results": {
              "quality": "${{ needs.nightly-quality.result }}",
              "testing": "${{ needs.comprehensive-testing.result }}",
              "build": "${{ needs.nightly-build.result }}",
              "deployment": "${{ needs.deployment-validation.result }}"
            }
          }
          EOF

      - name: Send notifications
        if: inputs.notify_on_success == true || always()
        run: |
          # Determine overall status
          if [[ "${{ needs.nightly-quality.result }}" == "success" && 
                "${{ needs.comprehensive-testing.result }}" == "success" && 
                "${{ needs.nightly-build.result }}" == "success" ]]; then
            STATUS="✅ SUCCESS"
            COLOR="good"
          else
            STATUS="❌ FAILED"
            COLOR="danger"
          fi
          
          # Send Slack notification
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{
                "text": "🌙 Nightly Build Report: '"$STATUS"'",
                "attachments": [{
                  "color": "'"$COLOR"'",
                  "fields": [{
                    "title": "Version",
                    "value": "${{ needs.setup.outputs.version }}",
                    "short": true
                  }, {
                    "title": "Quality Score",
                    "value": "${{ needs.nightly-quality.outputs.quality_score }}/100",
                    "short": true
                  }, {
                    "title": "Security Score",
                    "value": "${{ needs.nightly-quality.outputs.security_baseline }}/100",
                    "short": true
                  }, {
                    "title": "Build Size",
                    "value": "${{ needs.nightly-build.outputs.build_size }} bytes",
                    "short": true
                  }],
                  "footer": "Nephoran Nightly Pipeline",
                  "ts": '$(date +%s)'
                }]
              }' || echo "Slack notification failed"
          fi

      - name: Update GitHub summary
        run: |
          cat final-reports/nightly-report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload comprehensive reports
        uses: actions/upload-artifact@v4
        with:
          name: nightly-comprehensive-report
          path: |
            final-reports/
            nightly-artifacts/
          retention-days: 30

      - name: Commit trend data
        if: github.ref == 'refs/heads/main'
        run: |
          # Commit trend data back to repository
          git config --global user.name "nightly-build[bot]"
          git config --global user.email "nightly-build[bot]@nephoran.ai"
          
          mkdir -p .github/metrics
          cp final-reports/trends.csv .github/metrics/nightly-trends.csv
          cp final-reports/metrics.json .github/metrics/latest-nightly.json
          
          git add .github/metrics/
          git commit -m "chore: update nightly build metrics for ${{ needs.setup.outputs.version }}" || exit 0
          git push origin HEAD:main || echo "Failed to push metrics - continuing"