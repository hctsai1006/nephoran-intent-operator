# Security-Hardened O-RAN Adaptor Dockerfile
# SECURITY LEVEL: MAXIMUM | O-RAN Interface Service
# Telecom compliance and security optimized
#
# Security Features:
# - Distroless base for compliance
# - Non-root user (UID 65532)
# - TLS 1.3 only
# - NETCONF/YANG security hardening
# - O-RAN security specifications compliant

# ============================================================================
# STAGE 1: DEPENDENCIES
# ============================================================================
FROM golang:1.24-alpine AS dependencies

RUN addgroup -g 65532 -S nonroot && \
    adduser -u 65532 -S nonroot -G nonroot

WORKDIR /deps
COPY --chown=nonroot:nonroot go.mod go.sum ./

USER nonroot:nonroot
RUN go mod download && \
    go mod verify && \
    # Check for vulnerable dependencies
    go list -m -json all | grep -E '"(Path|Version)"' > /deps/modules.json

# ============================================================================
# STAGE 2: BUILD
# ============================================================================
FROM golang:1.24-alpine AS builder

ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=v2.0.0

RUN apk add --no-cache git ca-certificates tzdata && \
    apk upgrade --no-cache

RUN addgroup -g 65532 -S nonroot && \
    adduser -u 65532 -S nonroot -G nonroot

WORKDIR /build

# Copy dependencies
COPY --from=dependencies /go/pkg /go/pkg

# Copy source
COPY --chown=nonroot:nonroot cmd/oran-adaptor/ cmd/oran-adaptor/
COPY --chown=nonroot:nonroot pkg/ pkg/
COPY --chown=nonroot:nonroot api/ api/
COPY --chown=nonroot:nonroot go.mod go.sum ./

USER nonroot:nonroot

# Security-hardened build with all protections
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -buildmode=pie \
    -trimpath \
    -mod=readonly \
    -ldflags="-w -s -linkmode=external -extldflags '-static -fno-PIC -fstack-protector-all -D_FORTIFY_SOURCE=2' \
              -X main.version=${VERSION} \
              -X main.buildDate=${BUILD_DATE} \
              -X main.gitCommit=${VCS_REF} \
              -buildid=" \
    -tags="netgo osusergo static_build" \
    -o /build/oran-adaptor \
    ./cmd/oran-adaptor/main.go

# Verify binary security properties
RUN file /build/oran-adaptor | grep -q "statically linked" && \
    file /build/oran-adaptor | grep -q "pie executable"

# ============================================================================
# STAGE 3: COMPLIANCE CHECK
# ============================================================================
FROM alpine:3.20 AS compliance

COPY --from=builder /build/oran-adaptor /compliance/

# O-RAN compliance checks
RUN apk add --no-cache file && \
    # Verify binary properties for telecom compliance
    file /compliance/oran-adaptor | grep -E "(ELF 64-bit|statically linked|stripped)" && \
    # Check binary size for edge deployment
    SIZE=$(stat -c%s /compliance/oran-adaptor) && \
    [ $SIZE -lt 52428800 ] || echo "Warning: Binary size exceeds 50MB"

# ============================================================================
# STAGE 4: RUNTIME
# ============================================================================
FROM gcr.io/distroless/static:nonroot

# Import certificates and timezone
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy binary with execute-only permissions
COPY --from=builder --chmod=555 /build/oran-adaptor /oran-adaptor

# Security and compliance labels
LABEL security.scan="mandatory" \
      security.user="65532:65532" \
      security.capabilities="drop:ALL" \
      security.read-only-root="true" \
      security.no-new-privileges="true" \
      security.seccomp="runtime/default" \
      compliance.oran="WG2-WG3-WG4" \
      compliance.3gpp="R17-compliant" \
      network.protocols="A1,O1,O2,E2" \
      crypto.tls="1.3-only" \
      crypto.ciphers="TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256" \
      org.opencontainers.image.title="O-RAN Adaptor" \
      org.opencontainers.image.description="Security-hardened O-RAN interface adaptor"

USER 65532:65532

# Security and O-RAN compliance environment
ENV PORT=8082 \
    LOG_LEVEL=info \
    METRICS_ENABLED=true \
    # Resource limits
    GOGC=100 \
    GOMEMLIMIT=768MiB \
    GOMAXPROCS=4 \
    # O-RAN Security
    ORAN_SECURITY_LEVEL=strict \
    ORAN_TLS_VERSION=1.3 \
    ORAN_CIPHER_SUITES="TLS_AES_256_GCM_SHA384" \
    ORAN_MTLS_REQUIRED=true \
    ORAN_CLIENT_AUTH=RequireAndVerifyClientCert \
    # A1 Interface Security
    A1_AUTH_REQUIRED=true \
    A1_RATE_LIMIT=100 \
    # O1 Interface Security  
    O1_NETCONF_SSH_ONLY=true \
    O1_YANG_VALIDATION=strict \
    # O2 Interface Security
    O2_OAUTH2_REQUIRED=true \
    O2_TOKEN_VALIDATION=strict \
    # E2 Interface Security
    E2_ENCRYPTION_REQUIRED=true \
    E2_MESSAGE_INTEGRITY=true \
    # Audit and Compliance
    AUDIT_LOG_ALL_REQUESTS=true \
    COMPLIANCE_MODE=production \
    # Network timeouts
    READ_TIMEOUT=10s \
    WRITE_TIMEOUT=10s \
    IDLE_TIMEOUT=60s

# Health check for O-RAN interfaces
HEALTHCHECK --interval=30s --timeout=5s --start-period=20s --retries=3 \
    CMD ["/oran-adaptor", "--health-check", "--check-interfaces"]

# O-RAN standard ports
EXPOSE 8082/tcp

ENTRYPOINT ["/oran-adaptor"]
CMD ["--secure", "--compliance-mode", "--port=8082"]