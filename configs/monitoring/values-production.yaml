# Production Configuration for Nephoran Performance Monitoring Stack
# This configuration provides enterprise-grade monitoring with high availability,
# security hardening, and production-ready performance optimizations

global:
  namespace: nephoran-monitoring
  environment: production
  
  # High-performance storage for production
  storageClass: fast-ssd-retain
  retention: 90d  # Extended retention for compliance
  
  # Production security settings
  security:
    enabled: true
    runAsNonRoot: true
    runAsUser: 65534
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    
  # Production resource allocations
  resources:
    limits:
      cpu: "8"
      memory: "16Gi"
    requests:
      cpu: "4"
      memory: "8Gi"

# Production Prometheus configuration
prometheus:
  enabled: true
  
  server:
    image:
      tag: v2.48.0
    
    # High-availability configuration
    replicaCount: 2
    
    # Production storage requirements
    persistentVolume:
      enabled: true
      size: 500Gi
      storageClass: fast-ssd-retain
      accessModes:
        - ReadWriteOnce
      
    retention: 90d
    retentionSize: 400GB
    
    # Production-grade resource allocation
    resources:
      limits:
        cpu: 4000m
        memory: 8Gi
      requests:
        cpu: 2000m
        memory: 4Gi
        
    # High-performance scraping for production
    global:
      scrape_interval: 10s      # Higher frequency for production
      evaluation_interval: 10s
      scrape_timeout: 8s
      external_labels:
        cluster: 'nephoran-prod'
        environment: 'production'
        region: 'us-west-2'
        
    # Production optimization arguments
    extraArgs:
      web.enable-lifecycle: ""
      web.enable-admin-api: ""
      web.external-url: "https://prometheus.nephoran.com"
      storage.tsdb.min-block-duration: "2h"
      storage.tsdb.max-block-duration: "2h"
      storage.tsdb.retention.size: "400GB"
      query.max-concurrency: "50"        # Increased for production load
      query.timeout: "5m"                # Extended timeout
      query.max-samples: "500000000"     # Increased sample limit
      log.level: "info"
      
    # Production service configuration
    service:
      type: LoadBalancer
      port: 9090
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
        service.beta.kubernetes.io/aws-load-balancer-internal: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        
    # Production ingress with TLS
    ingress:
      enabled: true
      className: nginx
      annotations:
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
      hosts:
        - host: prometheus.nephoran.com
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: prometheus-tls
          hosts:
            - prometheus.nephoran.com
            
    # Anti-affinity for high availability
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: prometheus
                component: server
            topologyKey: kubernetes.io/hostname
            
    # Production node selection
    nodeSelector:
      kubernetes.io/arch: amd64
      nephoran.com/node-type: monitoring
      
    tolerations:
      - key: "monitoring"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

# Production Grafana configuration
grafana:
  enabled: true
  
  image:
    tag: 10.2.2
    
  # High availability for Grafana
  replicas: 2
  
  # Production admin configuration
  admin:
    existingSecret: grafana-admin-secret
    userKey: admin-user
    passwordKey: admin-password
    
  # Production persistence
  persistence:
    enabled: true
    type: pvc
    size: 50Gi
    storageClassName: fast-ssd-retain
    accessModes:
      - ReadWriteOnce
      
  # Production service configuration
  service:
    type: LoadBalancer
    port: 3000
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-internal: "false"
      
  # Production ingress with TLS
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - grafana.nephoran.com
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.nephoran.com
      
  # Production resource allocation
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
      
  # Production Grafana configuration
  grafana.ini:
    server:
      root_url: https://grafana.nephoran.com
      serve_from_sub_path: false
    security:
      admin_password: $__file{/etc/secrets/admin_password}
      secret_key: $__file{/etc/secrets/secret_key}
      cookie_secure: true
      cookie_samesite: strict
      strict_transport_security: true
    auth:
      disable_login_form: false
      disable_signout_menu: false
    auth.anonymous:
      enabled: false
    auth.basic:
      enabled: true
    auth.generic_oauth:
      enabled: true
      name: "Nephoran SSO"
      allow_sign_up: true
      client_id: $__file{/etc/secrets/oauth_client_id}
      client_secret: $__file{/etc/secrets/oauth_client_secret}
      scopes: "openid profile email"
      auth_url: "https://auth.nephoran.com/oauth/authorize"
      token_url: "https://auth.nephoran.com/oauth/token"
      api_url: "https://auth.nephoran.com/oauth/userinfo"
    database:
      type: postgres
      host: postgres.nephoran-db.svc.cluster.local:5432
      name: grafana
      user: $__file{/etc/secrets/db_user}
      password: $__file{/etc/secrets/db_password}
      ssl_mode: require
    session:
      provider: redis
      provider_config: redis.nephoran-cache.svc.cluster.local:6379
    log:
      mode: console
      level: info
    metrics:
      enabled: true
      
  # Environment variables for production
  env:
    GF_INSTALL_PLUGINS: "grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel"
    GF_SECURITY_ALLOW_EMBEDDING: "true"
    GF_SECURITY_COOKIE_SECURE: "true"
    GF_USERS_ALLOW_SIGN_UP: "false"
    GF_SNAPSHOTS_EXTERNAL_ENABLED: "false"
    
  # Anti-affinity for HA
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: grafana
          topologyKey: kubernetes.io/hostname
          
  # Production node selection
  nodeSelector:
    kubernetes.io/arch: amd64
    nephoran.com/node-type: monitoring

# Production AlertManager configuration
alertmanager:
  enabled: true
  
  image:
    tag: v0.26.0
    
  # High availability configuration
  replicaCount: 3
  
  # Production persistence
  persistence:
    enabled: true
    size: 20Gi
    storageClass: fast-ssd-retain
    
  # Production resource allocation
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
      
  # Production service configuration
  service:
    type: LoadBalancer
    port: 9093
    
  # Production AlertManager configuration
  config:
    global:
      smtp_smarthost: 'smtp.nephoran.com:587'
      smtp_from: 'alerts@nephoran.com'
      smtp_auth_username: 'alerts@nephoran.com'
      smtp_auth_password_file: '/etc/alertmanager/secrets/smtp-password'
      slack_api_url_file: '/etc/alertmanager/secrets/slack-webhook'
      pagerduty_url: 'https://events.pagerduty.com/v2/enqueue'
      
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 5s       # Faster grouping for production
      group_interval: 5s
      repeat_interval: 4h  # More frequent repeats for production
      receiver: 'production-team'
      routes:
        - match:
            severity: critical
          receiver: 'critical-production'
          group_wait: 0s     # Immediate for critical alerts
          group_interval: 0s
          repeat_interval: 15m
          
        - match:
            alertname: 'PerformanceClaimViolation'
          receiver: 'performance-team-production'
          group_wait: 10s
          
        - match:
            alertname: 'RegressionDetected'
          receiver: 'regression-team-production'
          group_wait: 0s
          
    receivers:
      - name: 'production-team'
        email_configs:
          - to: 'production-team@nephoran.com'
            subject: '[PROD] Nephoran Performance Alert - {{ .GroupLabels.alertname }}'
            body: |
              {{ range .Alerts }}
              ðŸš¨ **Production Alert**
              
              **Alert:** {{ .Annotations.summary }}
              **Description:** {{ .Annotations.description }}
              **Severity:** {{ .Labels.severity }}
              **Environment:** Production
              **Cluster:** {{ .Labels.cluster }}
              **Time:** {{ .StartsAt.Format "2006-01-02 15:04:05 UTC" }}
              
              **Labels:** {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }}{{ end }}
              
              **Dashboard:** https://grafana.nephoran.com/d/nephoran-executive-perf
              {{ end }}
              
        slack_configs:
          - api_url_file: '/etc/alertmanager/secrets/slack-webhook'
            channel: '#prod-alerts'
            title: 'ðŸš¨ Production Alert: {{ .GroupLabels.alertname }}'
            text: |
              {{ range .Alerts }}
              **Environment:** Production
              **Alert:** {{ .Annotations.summary }}
              **Description:** {{ .Annotations.description }}
              **Severity:** {{ .Labels.severity }}
              **Dashboard:** https://grafana.nephoran.com/d/nephoran-executive-perf
              {{ end }}
              
      - name: 'critical-production'
        email_configs:
          - to: 'critical-alerts@nephoran.com,cto@nephoran.com'
            subject: '[CRITICAL-PROD] Immediate Attention Required'
            body: |
              ðŸš¨ðŸš¨ðŸš¨ **CRITICAL PRODUCTION ALERT** ðŸš¨ðŸš¨ðŸš¨
              
              {{ range .Alerts }}
              **Alert:** {{ .Annotations.summary }}
              **Description:** {{ .Annotations.description }}
              **Started:** {{ .StartsAt.Format "2006-01-02 15:04:05 UTC" }}
              **Dashboard:** https://grafana.nephoran.com/d/nephoran-executive-perf
              {{ end }}
              
        pagerduty_configs:
          - routing_key_file: '/etc/alertmanager/secrets/pagerduty-key'
            description: 'Critical production issue in Nephoran Intent Operator'
            severity: 'critical'
            
        slack_configs:
          - api_url_file: '/etc/alertmanager/secrets/slack-webhook-critical'
            channel: '#critical-alerts'
            title: 'ðŸš¨ CRITICAL PRODUCTION ALERT'
            text: |
              @channel **IMMEDIATE ATTENTION REQUIRED**
              {{ range .Alerts }}
              **Alert:** {{ .Annotations.summary }}
              **Severity:** CRITICAL
              **Environment:** Production
              {{ end }}
            
      - name: 'performance-team-production'
        webhook_configs:
          - url: 'https://webhooks.nephoran.com/performance-alerts'
            send_resolved: true
            http_config:
              bearer_token_file: '/etc/alertmanager/secrets/webhook-token'
              
        email_configs:
          - to: 'performance-engineering@nephoran.com'
            subject: '[PROD-PERF] Performance Alert - {{ .GroupLabels.alertname }}'
            
      - name: 'regression-team-production'
        email_configs:
          - to: 'regression-team@nephoran.com,performance-engineering@nephoran.com'
            subject: '[PROD-REGRESSION] Performance Regression Detected'
            
        pagerduty_configs:
          - routing_key_file: '/etc/alertmanager/secrets/pagerduty-regression-key'
            description: 'Performance regression detected in production'
            severity: 'critical'
            
    inhibit_rules:
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        equal: ['alertname', 'instance']

# Service Monitors with production-specific settings
serviceMonitors:
  enabled: true
  
  llmProcessor:
    enabled: true
    namespace: nephoran-system
    selector:
      matchLabels:
        app: llm-processor
    endpoints:
      - port: metrics
        path: /metrics
        interval: 5s      # High frequency for production
        scrapeTimeout: 3s
        
  ragApi:
    enabled: true
    namespace: nephoran-system
    selector:
      matchLabels:
        app: rag-api
    endpoints:
      - port: metrics
        path: /metrics
        interval: 5s
        scrapeTimeout: 3s
        
  performanceRunner:
    enabled: true
    namespace: nephoran-monitoring
    selector:
      matchLabels:
        app: performance-test-runner
    endpoints:
      - port: metrics
        path: /metrics
        interval: 1s      # Highest frequency for benchmarks
        scrapeTimeout: 1s

# Production Prometheus Rules
prometheusRules:
  enabled: true
  
  # More aggressive thresholds for production
  recordingRules:
    - name: nephoran-performance-claims-production
      interval: 10s    # Higher frequency
      rules:
        - record: benchmark:intent_processing_latency_p95
          expr: histogram_quantile(0.95, rate(nephoran_intent_processing_duration_seconds_bucket{service="llm-processor"}[2m]))
          
        - record: benchmark:intent_processing_latency_p50
          expr: histogram_quantile(0.50, rate(nephoran_intent_processing_duration_seconds_bucket{service="llm-processor"}[2m]))
          
        - record: benchmark:intent_processing_rate_1m
          expr: rate(nephoran_intent_processing_total{service="llm-processor"}[1m]) * 60
          
        - record: benchmark:availability_5m
          expr: (1 - (sum(rate(nephoran_intent_processing_errors_total{service="llm-processor"}[5m])) / sum(rate(nephoran_intent_processing_total{service="llm-processor"}[5m])))) * 100
          
        - record: benchmark:rag_latency_p95
          expr: histogram_quantile(0.95, rate(nephoran_rag_retrieval_duration_seconds_bucket{service="rag-api"}[2m]))
          
        - record: benchmark:cache_hit_rate_5m
          expr: (sum(rate(nephoran_cache_hits_total{service="rag-api"}[5m])) / (sum(rate(nephoran_cache_hits_total{service="rag-api"}[5m])) + sum(rate(nephoran_cache_misses_total{service="rag-api"}[5m])))) * 100

  alertingRules:
    - name: nephoran-production-alerts
      rules:
        # Tighter thresholds for production
        - alert: IntentProcessingLatencySLAViolation
          expr: benchmark:intent_processing_latency_p95 > 1.8  # Tighter threshold
          for: 15s  # Faster detection
          labels:
            severity: critical
            environment: production
            component: llm-processor
          annotations:
            summary: "Production SLA violation: Intent processing P95 latency exceeds 1.8s"
            description: "P95 latency is {{ $value }}s, exceeding production threshold of 1.8s"
            runbook_url: "https://runbooks.nephoran.com/intent-processing-latency"
            
        - alert: ProductionAvailabilitySLAViolation
          expr: benchmark:availability_5m < 99.98  # Higher threshold for production
          for: 30s
          labels:
            severity: critical
            environment: production
          annotations:
            summary: "Production availability below 99.98%"
            description: "Current availability is {{ $value }}%, below production SLA of 99.98%"
            
        # Business impact alerts for production
        - alert: ProductionBusinessImpact
          expr: |
            (
              (benchmark:intent_processing_latency_p95 <= 1.8) * 100/6 +
              (benchmark_concurrent_users_current >= 200) * 100/6 +
              (benchmark:intent_processing_rate_1m >= 50) * 100/6 +  # Higher expectation
              (benchmark:availability_5m >= 99.98) * 100/6 +
              (benchmark:rag_latency_p95 <= 0.15) * 100/6 +          # Tighter threshold
              (benchmark:cache_hit_rate_5m >= 90) * 100/6             # Higher expectation
            ) < 95  # Higher overall threshold
          for: 1m
          labels:
            severity: critical
            environment: production
            impact: business
          annotations:
            summary: "Production performance score below acceptable threshold"
            description: "Performance score is {{ $value }}%, below production requirement of 95%"

# Production network policies
networkPolicies:
  enabled: true
  
  monitoring:
    enabled: true
    policyTypes:
      - Ingress
      - Egress
    ingress:
      - from:
          - namespaceSelector:
              matchLabels:
                name: nephoran-system
        ports:
          - protocol: TCP
            port: 9090
          - protocol: TCP
            port: 3000
          - protocol: TCP
            port: 9093
      # Allow ingress traffic
      - from: []
        ports:
          - protocol: TCP
            port: 80
          - protocol: TCP
            port: 443
    egress:
      # Allow DNS
      - to: []
        ports:
          - protocol: UDP
            port: 53
      # Allow HTTPS for webhooks
      - to: []
        ports:
          - protocol: TCP
            port: 443
      # Allow SMTP for email alerts
      - to: []
        ports:
          - protocol: TCP
            port: 587

# Production-specific extra configurations
extraConfig:
  # Performance optimization settings
  performance:
    enableCaching: true
    cacheSize: "2Gi"           # Larger cache for production
    queryParallelism: 20       # Higher parallelism
    
  # Enhanced security for production
  security:
    enableTLS: true
    tlsSecretName: monitoring-tls
    enablePodSecurityStandards: true
    
  # High availability configuration
  highAvailability:
    enabled: true
    replicaCount: 3            # Increased for production
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values: ["prometheus", "grafana", "alertmanager"]
            topologyKey: kubernetes.io/hostname
            
  # Production backup configuration
  backup:
    enabled: true
    schedule: "0 2 * * *"      # Daily at 2 AM
    retention: 30              # 30 days retention
    s3Bucket: "nephoran-monitoring-backup-prod"
    
  # Monitoring for the monitoring system
  selfMonitoring:
    enabled: true
    alerts:
      enabled: true
      thresholds:
        diskUsage: 85
        memoryUsage: 90
        cpuUsage: 85